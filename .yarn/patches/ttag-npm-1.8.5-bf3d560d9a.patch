diff --git a/dist/ttag.js b/dist/ttag.js
index abbca9e79eb579f3d9066d393390b45eb987ffc5..5cd9498e18f88f773c421b94cfe765225111be29 100644
--- a/dist/ttag.js
+++ b/dist/ttag.js
@@ -48,7 +48,7 @@ eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpac
 /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
 
 "use strict";
-eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildArr: () => (/* binding */ buildArr),\n/* harmony export */   buildStr: () => (/* binding */ buildStr),\n/* harmony export */   dedentStr: () => (/* binding */ dedentStr),\n/* harmony export */   getMsgid: () => (/* binding */ getMsgid),\n/* harmony export */   getPluralFnForTrans: () => (/* binding */ getPluralFnForTrans),\n/* harmony export */   getPluralFunc: () => (/* binding */ getPluralFunc),\n/* harmony export */   makePluralFunc: () => (/* binding */ makePluralFunc),\n/* harmony export */   msgid2Orig: () => (/* binding */ msgid2Orig),\n/* harmony export */   transformCompactObj: () => (/* binding */ transformCompactObj),\n/* harmony export */   transformTranslateObj: () => (/* binding */ transformTranslateObj)\n/* harmony export */ });\n/* harmony import */ var dedent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dedent */ \"./node_modules/dedent/dist/dedent.mjs\");\n/* harmony import */ var plural_forms_minimal_safe__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! plural-forms/minimal-safe */ \"./node_modules/plural-forms/minimal-safe.js\");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\nvar getMsgid = function getMsgid(str, exprs) {\n  var result = [];\n  var exprsLenght = exprs.length;\n  var strLength = str.length;\n  for (var _i = 0; _i < strLength; _i++) {\n    var expr = _i < exprsLenght ? \"${\".concat(_i, \"}\") : '';\n    result.push(str[_i] + expr);\n  }\n  return result.join('');\n};\nvar stringableRewindingIterator = function stringableRewindingIterator() {\n  return {\n    values: [],\n    index: -1,\n    toString: function toString() {\n      this.index = (this.index + 1) % this.values.length;\n      return this.values[this.index].toString();\n    }\n  };\n};\nvar removeSpaces = function removeSpaces(str) {\n  return str.replace(/\\s/g, '');\n};\nvar mem = {};\n// eslint-disable-next-line no-unused-vars\nvar memoize1 = function memoize1(f) {\n  return function (arg) {\n    if (mem[arg]) {\n      return mem[arg];\n    }\n    mem[arg] = f(arg);\n    return mem[arg];\n  };\n};\nvar reg = function reg(i) {\n  return new RegExp(\"\\\\$\\\\{(?:[\\\\s]+?|\\\\s?)\".concat(i, \"(?:[\\\\s]+?|\\\\s?)}\"));\n};\nvar memReg = memoize1(reg);\nvar msgid2Orig = function msgid2Orig(id, exprs) {\n  return exprs.reduce(function (r, expr, i) {\n    return r.replace(memReg(String(i)), String(expr));\n  }, id);\n};\nvar buildStr = function buildStr(strs, exprs) {\n  var exprsLength = exprs.length - 1;\n  return strs.reduce(function (r, s, i) {\n    return r + s + (i <= exprsLength ? exprs[i] : '');\n  }, '');\n};\nvar buildArr = function buildArr(strs, exprs) {\n  return strs.reduce(function (r, s, i) {\n    return exprs[i] !== undefined ? r.concat(s, exprs[i]) : r.concat(s);\n  }, []);\n};\nfunction pluralFnBody(pluralStr) {\n  return \"return args[+ (\".concat(pluralStr, \")];\");\n}\nvar fnCache = {};\nfunction makePluralFunc(pluralStr) {\n  var fn = fnCache[pluralStr];\n  if (!fn) {\n    fn = new Function('n', 'args', pluralFnBody(pluralStr));\n    fnCache[pluralStr] = fn;\n  }\n  return fn;\n}\nvar pluralRegex = /\\splural ?=?([\\s\\S]*);?/;\nfunction getPluralFunc(headers) {\n  var _pluralRegex$exec;\n  var pluralFormsHeader = headers['plural-forms'] || headers['Plural-Forms'];\n  if (!pluralFormsHeader) {\n    throw new Error('po. data should include \"language\" or \"plural-form\" header for ngettext');\n  }\n  var pluralFn = ((_pluralRegex$exec = pluralRegex.exec(pluralFormsHeader)) === null || _pluralRegex$exec === void 0 ? void 0 : _pluralRegex$exec[1]) || [];\n  if (pluralFn[pluralFn.length - 1] === ';') {\n    pluralFn = pluralFn.slice(0, -1);\n  }\n  return pluralFn;\n}\nvar variableREG = /\\$\\{\\s*([.\\w+\\[\\]])*\\s*\\}/g;\nfunction getObjectKeys(obj) {\n  var keys = [];\n  for (var _i2 = 0, _Object$entries = Object.entries(obj); _i2 < _Object$entries.length; _i2++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 1),\n      _key = _Object$entries$_i[0];\n    if (obj.hasOwnProperty(_key)) {\n      keys.push(_key);\n    }\n  }\n  return keys;\n}\nfunction replaceVariables(str, obj) {\n  return str.replace(variableREG, function (variable) {\n    return \"${\".concat(obj[removeSpaces(variable)], \"}\");\n  });\n}\nfunction getVariablesMap(msgid) {\n  var variableNumberMap = {};\n  var variables = msgid.match(variableREG);\n  if (!variables) return null;\n  for (var _i3 = 0; _i3 < variables.length; _i3++) {\n    var k = removeSpaces(variables[_i3]);\n    variableNumberMap[k] = variableNumberMap[k] || stringableRewindingIterator();\n    variableNumberMap[k].values.push(_i3);\n  }\n  return variableNumberMap;\n}\nfunction transformTranslate(translate) {\n  var variableNumberMap = getVariablesMap(translate.msgid);\n  if (!variableNumberMap) {\n    return translate;\n  }\n  var msgid = replaceVariables(translate.msgid, variableNumberMap);\n  var newTranslate = {\n    msgid: msgid,\n    msgstr: []\n  };\n  if (translate.msgid_plural) {\n    newTranslate.msgid_plural = replaceVariables(translate.msgid_plural, variableNumberMap);\n  }\n  var transStrs = translate.msgstr;\n  for (var _i4 = 0; _i4 < transStrs.length; _i4++) {\n    newTranslate.msgstr.push(replaceVariables(transStrs[_i4], variableNumberMap));\n  }\n  newTranslate.comments = translate.comments;\n  return newTranslate;\n}\nfunction transformTranslateObj(translateObj) {\n  var newTranslations = {};\n  var transKeys = getObjectKeys(translateObj.translations);\n  for (var _i5 = 0; _i5 < transKeys.length; _i5++) {\n    var _key2 = transKeys[_i5];\n    var translation = translateObj.translations[_key2];\n    var newTranslation = {};\n    var msgids = getObjectKeys(translation);\n    for (var j = 0; j < msgids.length; j++) {\n      var msgid = msgids[j];\n      var newTranslate = transformTranslate(translation[msgid]);\n      newTranslation[newTranslate.msgid] = newTranslate;\n    }\n    newTranslations[_key2] = newTranslation;\n  }\n  translateObj.translations = newTranslations;\n  return translateObj;\n}\nfunction transformCompactTranslate(msgid, translations) {\n  var variableNumberMap = getVariablesMap(msgid);\n  if (!variableNumberMap) {\n    return [msgid, translations];\n  }\n  var newMsgid = replaceVariables(msgid, variableNumberMap);\n  var newTranslations = translations.map(function (trans) {\n    return replaceVariables(trans, variableNumberMap);\n  });\n  return [newMsgid, newTranslations];\n}\nfunction findDuplicatingMsgid(msgids, transformedMsgid) {\n  return msgids.find(function (msgid) {\n    var variableNumberMap = getVariablesMap(msgid);\n    if (!variableNumberMap) {\n      return false;\n    }\n    return replaceVariables(msgid, variableNumberMap) === transformedMsgid;\n  });\n}\nfunction transformCompactObj(compactObj) {\n  var newContexts = {};\n  var keys = getObjectKeys(compactObj.contexts);\n  for (var _i6 = 0; _i6 < keys.length; _i6++) {\n    var ctx = keys[_i6];\n    var newContext = {};\n    var msgids = getObjectKeys(compactObj.contexts[ctx]);\n    for (var j = 0; j < msgids.length; j++) {\n      var msgid = msgids[j];\n      var translations = compactObj.contexts[ctx][msgid];\n      var _transformCompactTran = transformCompactTranslate(msgid, translations),\n        _transformCompactTran2 = _slicedToArray(_transformCompactTran, 2),\n        newMsgid = _transformCompactTran2[0],\n        newTranslations = _transformCompactTran2[1];\n      if ( true && newContext[newMsgid]) {\n        var duplicatedMsgid = findDuplicatingMsgid(msgids, newMsgid);\n        throw new Error(\"Duplicate msgid (\\\"\".concat(msgid, \"\\\" and \\\"\").concat(duplicatedMsgid, \"\\\" will be interpreted as the same key \\\"\").concat(newMsgid, \"\\\") this potentially can lead to translation loss.\") + \" Consider using context for one of those msgid's. See the context doc here - https://ttag.js.org/docs/context.html\");\n      }\n      newContext[newMsgid] = newTranslations;\n    }\n    newContexts[ctx] = newContext;\n  }\n  compactObj.contexts = newContexts;\n  return compactObj;\n}\nfunction dedentStr(rawStr) {\n  if (!(typeof rawStr === 'string')) {\n    return rawStr;\n  }\n  if (rawStr.indexOf('\\n') === -1) {\n    return rawStr;\n  }\n  return (0,dedent__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(rawStr);\n}\nfunction getPluralFnForTrans(config) {\n  var headers = config.getCurrentLocaleHeaders();\n  var language = headers.language || headers.Language;\n  if (language) {\n    return (0,plural_forms_minimal_safe__WEBPACK_IMPORTED_MODULE_1__.getPluralFunc)(language);\n  }\n  var pluralStr = getPluralFunc(headers);\n  return makePluralFunc(pluralStr);\n}\n\n//# sourceURL=webpack://ttag/./src/utils.ts?");
+eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildArr: () => (/* binding */ buildArr),\n/* harmony export */   buildStr: () => (/* binding */ buildStr),\n/* harmony export */   dedentStr: () => (/* binding */ dedentStr),\n/* harmony export */   getMsgid: () => (/* binding */ getMsgid),\n/* harmony export */   getPluralFnForTrans: () => (/* binding */ getPluralFnForTrans),\n/* harmony export */   getPluralFunc: () => (/* binding */ getPluralFunc),\n/* harmony export */   makePluralFunc: () => (/* binding */ makePluralFunc),\n/* harmony export */   msgid2Orig: () => (/* binding */ msgid2Orig),\n/* harmony export */   transformCompactObj: () => (/* binding */ transformCompactObj),\n/* harmony export */   transformTranslateObj: () => (/* binding */ transformTranslateObj)\n/* harmony export */ });\n/* harmony import */ var dedent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dedent */ \"./node_modules/dedent/dist/dedent.mjs\");\n/* harmony import */ var plural_forms_minimal_safe__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! plural-forms/minimal-safe */ \"./node_modules/plural-forms/minimal-safe.js\");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\nvar getMsgid = function getMsgid(str, exprs) {\n  var result = [];\n  var exprsLenght = exprs.length;\n  var strLength = str.length;\n  for (var _i = 0; _i < strLength; _i++) {\n    var expr = _i < exprsLenght ? \"${\".concat(_i, \"}\") : '';\n    result.push(str[_i] + expr);\n  }\n  return result.join('');\n};\nvar stringableRewindingIterator = function stringableRewindingIterator() {\n  return {\n    values: [],\n    index: -1,\n    toString: function toString() {\n      this.index = (this.index + 1) % this.values.length;\n      return this.values[this.index].toString();\n    }\n  };\n};\nvar removeSpaces = function removeSpaces(str) {\n  return str.replace(/\\s/g, '');\n};\nvar mem = {};\n// eslint-disable-next-line no-unused-vars\nvar memoize1 = function memoize1(f) {\n  return function (arg) {\n    if (mem[arg]) {\n      return mem[arg];\n    }\n    mem[arg] = f(arg);\n    return mem[arg];\n  };\n};\nvar reg = function reg(i) {\n  return new RegExp(\"\\\\$\\\\{(?:[\\\\s]+?|\\\\s?)\".concat(i, \"(?:[\\\\s]+?|\\\\s?)}\"));\n};\nvar memReg = memoize1(reg);\nvar msgid2Orig = function msgid2Orig(id, exprs) {\n  return exprs.reduce(function (r, expr, i) {\n    return r.replace(memReg(String(i)), String(expr));\n  }, id);\n};\nvar buildStr = function buildStr(strs, exprs) {\n  var exprsLength = exprs.length - 1;\n  return strs.reduce(function (r, s, i) {\n    return r + s + (i <= exprsLength ? exprs[i] : '');\n  }, '');\n};\nvar buildArr = function buildArr(strs, exprs) {\n  return strs.reduce(function (r, s, i) {\n    return exprs[i] !== undefined ? r.concat(s, exprs[i]) : r.concat(s);\n  }, []);\n};\nfunction pluralFnBody(pluralStr) {\n  return \"return args[+ (\".concat(pluralStr, \")];\");\n}\nvar fnCache = {};\nfunction makePluralFunc(pluralStr) {\n  var fn = fnCache[pluralStr];\n  if (!fn) {\n    fn = new Function('n', 'args', pluralFnBody(pluralStr));\n    fnCache[pluralStr] = fn;\n  }\n  return fn;\n}\nvar pluralRegex = /\\splural ?=?([\\s\\S]*);?/;\nfunction getPluralFunc(headers) {\n  var _pluralRegex$exec;\n  var pluralFormsHeader = headers['plural-forms'] || headers['Plural-Forms'];\n  if (!pluralFormsHeader) {\n    throw new Error('po. data should include \"language\" or \"plural-form\" header for ngettext');\n  }\n  var pluralFn = ((_pluralRegex$exec = pluralRegex.exec(pluralFormsHeader)) === null || _pluralRegex$exec === void 0 ? void 0 : _pluralRegex$exec[1]) || [];\n  if (pluralFn[pluralFn.length - 1] === ';') {\n    pluralFn = pluralFn.slice(0, -1);\n  }\n  return pluralFn;\n}\nvar variableREG = /\\$\\{\\s*([.\\w+\\[\\]])*\\s*\\}/g;\nfunction getObjectKeys(obj) {\n  var keys = [];\n  for (var _i2 = 0, _Object$entries = Object.entries(obj); _i2 < _Object$entries.length; _i2++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 1),\n      _key = _Object$entries$_i[0];\n    if (obj.hasOwnProperty(_key)) {\n      keys.push(_key);\n    }\n  }\n  return keys;\n}\nfunction replaceVariables(str, obj) {\n  return str.replace(variableREG, function (variable) {\n    return \"${\".concat(obj[removeSpaces(variable)], \"}\");\n  });\n}\nfunction getVariablesMap(msgid) {\n  var variableNumberMap = {};\n  var variables = msgid.match(variableREG);\n  if (!variables) return null;\n  for (var _i3 = 0; _i3 < variables.length; _i3++) {\n    var k = removeSpaces(variables[_i3]);\n    variableNumberMap[k] = variableNumberMap[k] || stringableRewindingIterator();\n    variableNumberMap[k].values.push(_i3);\n  }\n  return variableNumberMap;\n}\nfunction transformTranslate(translate) {\n  var variableNumberMap = getVariablesMap(translate.msgid);\n  if (!variableNumberMap) {\n    return translate;\n  }\n  var msgid = replaceVariables(translate.msgid, variableNumberMap);\n  var newTranslate = {\n    msgid: msgid,\n    msgstr: []\n  };\n  if (translate.msgid_plural) {\n    newTranslate.msgid_plural = replaceVariables(translate.msgid_plural, variableNumberMap);\n  }\n  var transStrs = translate.msgstr;\n  for (var _i4 = 0; _i4 < transStrs.length; _i4++) {\n    newTranslate.msgstr.push(replaceVariables(transStrs[_i4], variableNumberMap));\n  }\n  newTranslate.comments = translate.comments;\n  return newTranslate;\n}\nfunction transformTranslateObj(translateObj) {\n  var newTranslations = {};\n  var transKeys = getObjectKeys(translateObj.translations);\n  for (var _i5 = 0; _i5 < transKeys.length; _i5++) {\n    var _key2 = transKeys[_i5];\n    var translation = translateObj.translations[_key2];\n    var newTranslation = {};\n    var msgids = getObjectKeys(translation);\n    for (var j = 0; j < msgids.length; j++) {\n      var msgid = msgids[j];\n      var newTranslate = transformTranslate(translation[msgid]);\n      newTranslation[newTranslate.msgid] = newTranslate;\n    }\n    newTranslations[_key2] = newTranslation;\n  }\n  translateObj.translations = newTranslations;\n  return translateObj;\n}\nfunction transformCompactTranslate(msgid, translations) {\n  var variableNumberMap = getVariablesMap(msgid);\n  if (!variableNumberMap) {\n    return [msgid, translations];\n  }\n  var newMsgid = replaceVariables(msgid, variableNumberMap);\n  var newTranslations = translations.map(function (trans) {\n    return replaceVariables(trans, variableNumberMap);\n  });\n  return [newMsgid, newTranslations];\n}\nfunction findDuplicatingMsgid(msgids, transformedMsgid) {\n  return msgids.find(function (msgid) {\n    var variableNumberMap = getVariablesMap(msgid);\n    if (!variableNumberMap) {\n      return false;\n    }\n    return replaceVariables(msgid, variableNumberMap) === transformedMsgid;\n  });\n}\nfunction transformCompactObj(compactObj) {\n  var newContexts = {};\n  var keys = getObjectKeys(compactObj.contexts);\n  for (var _i6 = 0; _i6 < keys.length; _i6++) {\n    var ctx = keys[_i6];\n    var newContext = {};\n    var msgids = getObjectKeys(compactObj.contexts[ctx]);\n    for (var j = 0; j < msgids.length; j++) {\n      var msgid = msgids[j];\n      var translations = compactObj.contexts[ctx][msgid];\n      var _transformCompactTran = transformCompactTranslate(msgid, translations),\n        _transformCompactTran2 = _slicedToArray(_transformCompactTran, 2),\n        newMsgid = _transformCompactTran2[0],\n        newTranslations = _transformCompactTran2[1];\n      if ( true && newContext[newMsgid]) {\n        var duplicatedMsgid = findDuplicatingMsgid(msgids, newMsgid);\n        console.error(\"Duplicate msgid (\\\"\".concat(msgid, \"\\\" and \\\"\").concat(duplicatedMsgid, \"\\\" will be interpreted as the same key \\\"\").concat(newMsgid, \"\\\") this potentially can lead to translation loss.\") + \" Consider using context for one of those msgid's. See the context doc here - https://ttag.js.org/docs/context.html\");\n      }\n      newContext[newMsgid] = newTranslations;\n    }\n    newContexts[ctx] = newContext;\n  }\n  compactObj.contexts = newContexts;\n  return compactObj;\n}\nfunction dedentStr(rawStr) {\n  if (!(typeof rawStr === 'string')) {\n    return rawStr;\n  }\n  if (rawStr.indexOf('\\n') === -1) {\n    return rawStr;\n  }\n  return (0,dedent__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(rawStr);\n}\nfunction getPluralFnForTrans(config) {\n  var headers = config.getCurrentLocaleHeaders();\n  var language = headers.language || headers.Language;\n  if (language) {\n    return (0,plural_forms_minimal_safe__WEBPACK_IMPORTED_MODULE_1__.getPluralFunc)(language);\n  }\n  var pluralStr = getPluralFunc(headers);\n  return makePluralFunc(pluralStr);\n}\n\n//# sourceURL=webpack://ttag/./src/utils.ts?");
 
 /***/ }),
 

diff --git a/packages/drive-store/store/_actions/useActions.tsx b/packages/drive-store/store/_actions/useActions.tsx
index c34027f30d..2e6b22f640 100644
--- a/packages/drive-store/store/_actions/useActions.tsx
+++ b/packages/drive-store/store/_actions/useActions.tsx
@@ -251,7 +251,10 @@ export default function useActions() {
         createMovedItemsNotifications(linksToMove, result.successes, result.failures, undoAction);
     };
 
-    const trashLinks = async (abortSignal: AbortSignal, linksToTrash: LinkInfo[]) => {
+    /**
+     * @param [notify] - whether notification popover should be displayed upon successful trash. Disabled
+     */
+    const trashLinks = async (abortSignal: AbortSignal, linksToTrash: LinkInfo[], notify = true) => {
         if (!linksToTrash.length) {
             return;
         }
@@ -265,6 +268,10 @@ export default function useActions() {
             }))
         );
 
+        if (!notify) {
+            return;
+        }
+
         // This is a bit ugly, but the photo linkId cache is not connected
         // very well to the rest of our state.
         // removePhotosFromCache(result.successes);
@@ -282,7 +289,10 @@ export default function useActions() {
         createTrashedItemsNotifications(linksToTrash, result.successes, result.failures, undoAction);
     };
 
-    const restoreLinks = async (abortSignal: AbortSignal, linksToRestore: LinkInfo[]) => {
+    /**
+     * @param [notify] - whether notification popover should be displayed upon successful trash. Disabled on Docs
+     */
+    const restoreLinks = async (abortSignal: AbortSignal, linksToRestore: LinkInfo[], notify = true) => {
         if (!linksToRestore.length) {
             return;
         }
@@ -292,6 +302,10 @@ export default function useActions() {
             linksToRestore.map(({ linkId, rootShareId }) => ({ linkId, shareId: rootShareId }))
         );
 
+        if (!notify) {
+            return;
+        }
+
         const undoAction = async () => {
             const linksToTrash = result.successes
                 .map((linkId) => linksToRestore.find((link) => link.linkId === linkId))

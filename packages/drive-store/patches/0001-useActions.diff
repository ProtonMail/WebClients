diff --git a/packages/drive-store/store/_actions/useActions.tsx b/packages/drive-store/store/_actions/useActions.tsx
index 2f83ae9c8b..a587edb953 100644
--- a/packages/drive-store/store/_actions/useActions.tsx
+++ b/packages/drive-store/store/_actions/useActions.tsx
@@ -8,7 +8,7 @@ import { sendErrorReport } from '../../utils/errorHandling';
 import { ValidationError } from '../../utils/errorHandling/ValidationError';
 import useDevicesActions from '../_devices/useDevicesActions';
 import { useLinkActions, useLinksActions } from '../_links';
-import { usePhotosOrPhotosWithAlbums } from '../_photos/PhotosOrPhotosWithAlbumsProvider';
+// import { usePhotosOrPhotosWithAlbums } from '../_photos/PhotosOrPhotosWithAlbumsProvider';
 import { useShareActions, useShareUrl } from '../_shares';
 import useUploadFile from '../_uploads/UploadProvider/useUploadFile';
 import { TransferConflictStrategy } from '../_uploads/interface';
@@ -38,7 +38,7 @@ export default function useActions() {
     const shareUrl = useShareUrl();
     const shareActions = useShareActions();
     const devicesActions = useDevicesActions();
-    const { removePhotosFromCache } = usePhotosOrPhotosWithAlbums();
+    // const { removePhotosFromCache } = usePhotosOrPhotosWithAlbums();
 
     const createFolder = async (
         abortSignal: AbortSignal,
@@ -176,7 +176,7 @@ export default function useActions() {
 
         // This is a bit ugly, but the photo linkId cache is not connected
         // very well to the rest of our state.
-        removePhotosFromCache(result.successes);
+        // removePhotosFromCache(result.successes);
 
         const undoAction = async () => {
             const linkIdsPerParentId = Object.entries(result.originalParentIds).reduce(
@@ -226,7 +226,7 @@ export default function useActions() {
 
         // This is a bit ugly, but the photo linkId cache is not connected
         // very well to the rest of our state.
-        removePhotosFromCache(result.successes);
+        // removePhotosFromCache(result.successes);
 
         if (notify) {
             const undoAction = async () => {

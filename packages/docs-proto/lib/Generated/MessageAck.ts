/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.28.0
 * source: MessageAck.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from 'google-protobuf'
export class MessageAck extends pb_1.Message {
  #one_of_decls: number[][] = []
  constructor(
    data?:
      | any[]
      | {
          uuid?: string
        },
  ) {
    super()
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls)
    if (!Array.isArray(data) && typeof data == 'object') {
      if ('uuid' in data && data.uuid != undefined) {
        this.uuid = data.uuid
      }
    }
  }
  get uuid() {
    return pb_1.Message.getFieldWithDefault(this, 1, '') as string
  }
  set uuid(value: string) {
    pb_1.Message.setField(this, 1, value)
  }
  static fromObject(data: { uuid?: string }): MessageAck {
    const message = new MessageAck({})
    if (data.uuid != null) {
      message.uuid = data.uuid
    }
    return message
  }
  toObject() {
    const data: {
      uuid?: string
    } = {}
    if (this.uuid != null) {
      data.uuid = this.uuid
    }
    return data
  }
  serialize(): Uint8Array
  serialize(w: pb_1.BinaryWriter): void
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter()
    if (this.uuid.length) writer.writeString(1, this.uuid)
    if (!w) return writer.getResultBuffer()
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageAck {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
      message = new MessageAck()
    while (reader.nextField()) {
      if (reader.isEndGroup()) break
      switch (reader.getFieldNumber()) {
        case 1:
          message.uuid = reader.readString()
          break
        default:
          reader.skipField()
      }
    }
    return message
  }
  serializeBinary(): Uint8Array {
    return this.serialize()
  }
  static deserializeBinary(bytes: Uint8Array): MessageAck {
    return MessageAck.deserialize(bytes)
  }
}

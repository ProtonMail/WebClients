@use 'sass:map';
@import '~@proton/styles/scss/lib';

.orderableHelper {
	z-index: map.get($z-indexes, 'modals');
	color: var(--text-norm);
	background: var(--background-norm);
	border: 1px solid var(--border-norm);
	border-radius: var(--border-radius-lg) !important;
	box-shadow: var(--shadow-lifted);

	&--inModal {
		display: flex;
		flex-wrap: nowrap;
		align-items: center;
	}

	td {
		border: none;
	}
}

/* prevents a text selection on Chrome when doing drag and drop => we rely on the style attribute on the tr:
	when it's REALLY not empty, it means we do a drag and drop, so we prevent the user selection */
.orderableTable:has(tr[style]:not([style=''])) {
	// when style attribute is there AND with something inside
	td {
		user-select: none;
	}
}

@container (max-width: 35rem) {
	.orderableTable {
		tbody {
			tr {
				position: relative;
				padding-inline-start: rem(40);
				margin-block-end: -1px !important;

				&:not(:last-child) {
					border-end-start-radius: 0;
					border-end-end-radius: 0;
				}

				&:not(:first-child) {
					border-start-start-radius: 0;
					border-start-end-radius: 0;
				}
			}

			// Helper to hide an element when table is adapted for small viewports
			// Use case: Contact merge table, first name needs to be hidden if equal to "-"
			.isHiddenWhenStacked {
				display: none;
			}

			// When helper is applied, remove all the paddings on the cell
			td:has(.isHiddenWhenStacked) {
				padding: 0;
			}

			td:first-child {
				position: absolute;
				display: flex;
				align-items: center;
				justify-content: center;
				inset-inline-start: var(--space-2);
				padding: 0;
				block-size: calc(100% - var(--space-3) * 2);
				inline-size: rem(24);
			}
		}
	}
}

/* eslint-disable */
// @generated by protobuf-ts 2.9.6 with parameter eslint_disable
// @generated from protobuf file "file-v1.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from '@protobuf-ts/runtime';
import type { IBinaryWriter } from '@protobuf-ts/runtime';
import { WireType } from '@protobuf-ts/runtime';
import type { BinaryReadOptions } from '@protobuf-ts/runtime';
import type { IBinaryReader } from '@protobuf-ts/runtime';
import { UnknownFieldHandler } from '@protobuf-ts/runtime';
import type { PartialMessage } from '@protobuf-ts/runtime';
import { reflectionMergePartial } from '@protobuf-ts/runtime';
import { MessageType } from '@protobuf-ts/runtime';
/**
 * @generated from protobuf message FileMetadata
 */
export interface FileMetadata {
    /**
     * File name
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * MIME-Type (lowercase)
     *
     * @generated from protobuf field: string mime_type = 2;
     */
    mimeType: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class FileMetadata$Type extends MessageType<FileMetadata> {
    constructor() {
        super('FileMetadata', [
            { no: 1, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: 'mime_type', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
        ]);
    }
    create(value?: PartialMessage<FileMetadata>): FileMetadata {
        const message = globalThis.Object.create(this.messagePrototype!);
        message.name = '';
        message.mimeType = '';
        if (value !== undefined) reflectionMergePartial<FileMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: FileMetadata
    ): FileMetadata {
        let message = target ?? this.create(),
            end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string mime_type */ 2:
                    message.mimeType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        );
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FileMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== '') writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string mime_type = 2; */
        if (message.mimeType !== '') writer.tag(2, WireType.LengthDelimited).string(message.mimeType);
        let u = options.writeUnknownFields;
        if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FileMetadata
 */
export const FileMetadata = new FileMetadata$Type();

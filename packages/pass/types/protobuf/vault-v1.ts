/* eslint-disable */
// @generated by protobuf-ts 2.9.6 with parameter eslint_disable
// @generated from protobuf file "vault-v1.proto" (package "proton_pass_vault_v1", syntax proto3)
// tslint:disable
import { VaultIcon, VaultColor } from './vault-v1.static';
import type { BinaryWriteOptions } from '@protobuf-ts/runtime';
import type { IBinaryWriter } from '@protobuf-ts/runtime';
import { WireType } from '@protobuf-ts/runtime';
import type { BinaryReadOptions } from '@protobuf-ts/runtime';
import type { IBinaryReader } from '@protobuf-ts/runtime';
import { UnknownFieldHandler } from '@protobuf-ts/runtime';
import type { PartialMessage } from '@protobuf-ts/runtime';
import { reflectionMergePartial } from '@protobuf-ts/runtime';
import { MessageType } from '@protobuf-ts/runtime';
/**
 * @generated from protobuf message proton_pass_vault_v1.VaultDisplayPreferences
 */
export interface VaultDisplayPreferences {
    /**
     * @generated from protobuf field: proton_pass_vault_v1.VaultIcon icon = 1;
     */
    icon: VaultIcon;
    /**
     * @generated from protobuf field: proton_pass_vault_v1.VaultColor color = 2;
     */
    color: VaultColor;
}
/**
 * @generated from protobuf message proton_pass_vault_v1.Vault
 */
export interface Vault {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 2;
     */
    description: string;
    /**
     * @generated from protobuf field: proton_pass_vault_v1.VaultDisplayPreferences display = 3;
     */
    display?: VaultDisplayPreferences;
}
/**
 * @generated from protobuf enum proton_pass_vault_v1.VaultIcon
 */
/**
 * @generated from protobuf enum proton_pass_vault_v1.VaultColor
 */
// @generated message type with reflection information, may provide speed optimized methods
class VaultDisplayPreferences$Type extends MessageType<VaultDisplayPreferences> {
    constructor() {
        super('proton_pass_vault_v1.VaultDisplayPreferences', [
            { no: 1, name: 'icon', kind: 'enum', T: () => ['proton_pass_vault_v1.VaultIcon', VaultIcon] },
            { no: 2, name: 'color', kind: 'enum', T: () => ['proton_pass_vault_v1.VaultColor', VaultColor] },
        ]);
    }
    create(value?: PartialMessage<VaultDisplayPreferences>): VaultDisplayPreferences {
        const message = globalThis.Object.create(this.messagePrototype!);
        message.icon = 0;
        message.color = 0;
        if (value !== undefined) reflectionMergePartial<VaultDisplayPreferences>(this, message, value);
        return message;
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: VaultDisplayPreferences
    ): VaultDisplayPreferences {
        let message = target ?? this.create(),
            end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proton_pass_vault_v1.VaultIcon icon */ 1:
                    message.icon = reader.int32();
                    break;
                case /* proton_pass_vault_v1.VaultColor color */ 2:
                    message.color = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        );
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(
        message: VaultDisplayPreferences,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* proton_pass_vault_v1.VaultIcon icon = 1; */
        if (message.icon !== 0) writer.tag(1, WireType.Varint).int32(message.icon);
        /* proton_pass_vault_v1.VaultColor color = 2; */
        if (message.color !== 0) writer.tag(2, WireType.Varint).int32(message.color);
        let u = options.writeUnknownFields;
        if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proton_pass_vault_v1.VaultDisplayPreferences
 */
export const VaultDisplayPreferences = new VaultDisplayPreferences$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Vault$Type extends MessageType<Vault> {
    constructor() {
        super('proton_pass_vault_v1.Vault', [
            { no: 1, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: 'description', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: 'display', kind: 'message', T: () => VaultDisplayPreferences },
        ]);
    }
    create(value?: PartialMessage<Vault>): Vault {
        const message = globalThis.Object.create(this.messagePrototype!);
        message.name = '';
        message.description = '';
        if (value !== undefined) reflectionMergePartial<Vault>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Vault): Vault {
        let message = target ?? this.create(),
            end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* proton_pass_vault_v1.VaultDisplayPreferences display */ 3:
                    message.display = VaultDisplayPreferences.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.display
                    );
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        );
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Vault, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== '') writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string description = 2; */
        if (message.description !== '') writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* proton_pass_vault_v1.VaultDisplayPreferences display = 3; */
        if (message.display)
            VaultDisplayPreferences.internalBinaryWrite(
                message.display,
                writer.tag(3, WireType.LengthDelimited).fork(),
                options
            ).join();
        let u = options.writeUnknownFields;
        if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proton_pass_vault_v1.Vault
 */
export const Vault = new Vault$Type();

/* eslint-disable */
// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "vault-v1.proto" (package "proton_pass_vault_v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from '@protobuf-ts/runtime';
import type { IBinaryWriter } from '@protobuf-ts/runtime';
import { WireType } from '@protobuf-ts/runtime';
import type { BinaryReadOptions } from '@protobuf-ts/runtime';
import type { IBinaryReader } from '@protobuf-ts/runtime';
import { UnknownFieldHandler } from '@protobuf-ts/runtime';
import type { PartialMessage } from '@protobuf-ts/runtime';
import { reflectionMergePartial } from '@protobuf-ts/runtime';
import { MESSAGE_TYPE } from '@protobuf-ts/runtime';
import { MessageType } from '@protobuf-ts/runtime';

/**
 * @generated from protobuf message proton_pass_vault_v1.VaultDisplayPreferences
 */
export interface VaultDisplayPreferences {
    /**
     * @generated from protobuf field: proton_pass_vault_v1.VaultIcon icon = 1;
     */
    icon: VaultIcon;
    /**
     * @generated from protobuf field: proton_pass_vault_v1.VaultColor color = 2;
     */
    color: VaultColor;
}
/**
 * @generated from protobuf message proton_pass_vault_v1.Vault
 */
export interface Vault {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 2;
     */
    description: string;
    /**
     * @generated from protobuf field: proton_pass_vault_v1.VaultDisplayPreferences display = 3;
     */
    display?: VaultDisplayPreferences;
}
/**
 * @generated from protobuf enum proton_pass_vault_v1.VaultIcon
 */
export enum VaultIcon {
    /**
     * @generated from protobuf enum value: ICON_UNSPECIFIED = 0;
     */
    ICON_UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: ICON_CUSTOM = 1;
     */
    ICON_CUSTOM = 1,
    /**
     * @generated from protobuf enum value: ICON1 = 2;
     */
    ICON1 = 2,
    /**
     * @generated from protobuf enum value: ICON2 = 3;
     */
    ICON2 = 3,
    /**
     * @generated from protobuf enum value: ICON3 = 4;
     */
    ICON3 = 4,
    /**
     * @generated from protobuf enum value: ICON4 = 5;
     */
    ICON4 = 5,
    /**
     * @generated from protobuf enum value: ICON5 = 6;
     */
    ICON5 = 6,
    /**
     * @generated from protobuf enum value: ICON6 = 7;
     */
    ICON6 = 7,
    /**
     * @generated from protobuf enum value: ICON7 = 8;
     */
    ICON7 = 8,
    /**
     * @generated from protobuf enum value: ICON8 = 9;
     */
    ICON8 = 9,
    /**
     * @generated from protobuf enum value: ICON9 = 10;
     */
    ICON9 = 10,
    /**
     * @generated from protobuf enum value: ICON10 = 11;
     */
    ICON10 = 11,
    /**
     * @generated from protobuf enum value: ICON11 = 12;
     */
    ICON11 = 12,
    /**
     * @generated from protobuf enum value: ICON12 = 13;
     */
    ICON12 = 13,
    /**
     * @generated from protobuf enum value: ICON13 = 14;
     */
    ICON13 = 14,
    /**
     * @generated from protobuf enum value: ICON14 = 15;
     */
    ICON14 = 15,
    /**
     * @generated from protobuf enum value: ICON15 = 16;
     */
    ICON15 = 16,
    /**
     * @generated from protobuf enum value: ICON16 = 17;
     */
    ICON16 = 17,
    /**
     * @generated from protobuf enum value: ICON17 = 18;
     */
    ICON17 = 18,
    /**
     * @generated from protobuf enum value: ICON18 = 19;
     */
    ICON18 = 19,
    /**
     * @generated from protobuf enum value: ICON19 = 20;
     */
    ICON19 = 20,
    /**
     * @generated from protobuf enum value: ICON20 = 21;
     */
    ICON20 = 21,
    /**
     * @generated from protobuf enum value: ICON21 = 22;
     */
    ICON21 = 22,
    /**
     * @generated from protobuf enum value: ICON22 = 23;
     */
    ICON22 = 23,
    /**
     * @generated from protobuf enum value: ICON23 = 24;
     */
    ICON23 = 24,
    /**
     * @generated from protobuf enum value: ICON24 = 25;
     */
    ICON24 = 25,
    /**
     * @generated from protobuf enum value: ICON25 = 26;
     */
    ICON25 = 26,
    /**
     * @generated from protobuf enum value: ICON26 = 27;
     */
    ICON26 = 27,
    /**
     * @generated from protobuf enum value: ICON27 = 28;
     */
    ICON27 = 28,
    /**
     * @generated from protobuf enum value: ICON28 = 29;
     */
    ICON28 = 29,
    /**
     * @generated from protobuf enum value: ICON29 = 30;
     */
    ICON29 = 30,
    /**
     * @generated from protobuf enum value: ICON30 = 31;
     */
    ICON30 = 31,
}
/**
 * @generated from protobuf enum proton_pass_vault_v1.VaultColor
 */
export enum VaultColor {
    /**
     * @generated from protobuf enum value: COLOR_UNSPECIFIED = 0;
     */
    COLOR_UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: COLOR_CUSTOM = 1;
     */
    COLOR_CUSTOM = 1,
    /**
     * @generated from protobuf enum value: COLOR1 = 2;
     */
    COLOR1 = 2,
    /**
     * @generated from protobuf enum value: COLOR2 = 3;
     */
    COLOR2 = 3,
    /**
     * @generated from protobuf enum value: COLOR3 = 4;
     */
    COLOR3 = 4,
    /**
     * @generated from protobuf enum value: COLOR4 = 5;
     */
    COLOR4 = 5,
    /**
     * @generated from protobuf enum value: COLOR5 = 6;
     */
    COLOR5 = 6,
    /**
     * @generated from protobuf enum value: COLOR6 = 7;
     */
    COLOR6 = 7,
    /**
     * @generated from protobuf enum value: COLOR7 = 8;
     */
    COLOR7 = 8,
    /**
     * @generated from protobuf enum value: COLOR8 = 9;
     */
    COLOR8 = 9,
    /**
     * @generated from protobuf enum value: COLOR9 = 10;
     */
    COLOR9 = 10,
    /**
     * @generated from protobuf enum value: COLOR10 = 11;
     */
    COLOR10 = 11,
}
// @generated message type with reflection information, may provide speed optimized methods
class VaultDisplayPreferences$Type extends MessageType<VaultDisplayPreferences> {
    constructor() {
        super('proton_pass_vault_v1.VaultDisplayPreferences', [
            { no: 1, name: 'icon', kind: 'enum', T: () => ['proton_pass_vault_v1.VaultIcon', VaultIcon] },
            { no: 2, name: 'color', kind: 'enum', T: () => ['proton_pass_vault_v1.VaultColor', VaultColor] },
        ]);
    }
    create(value?: PartialMessage<VaultDisplayPreferences>): VaultDisplayPreferences {
        const message = { icon: 0, color: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined) reflectionMergePartial<VaultDisplayPreferences>(this, message, value);
        return message;
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: VaultDisplayPreferences
    ): VaultDisplayPreferences {
        let message = target ?? this.create(),
            end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proton_pass_vault_v1.VaultIcon icon */ 1:
                    message.icon = reader.int32();
                    break;
                case /* proton_pass_vault_v1.VaultColor color */ 2:
                    message.color = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        );
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(
        message: VaultDisplayPreferences,
        writer: IBinaryWriter,
        options: BinaryWriteOptions
    ): IBinaryWriter {
        /* proton_pass_vault_v1.VaultIcon icon = 1; */
        if (message.icon !== 0) writer.tag(1, WireType.Varint).int32(message.icon);
        /* proton_pass_vault_v1.VaultColor color = 2; */
        if (message.color !== 0) writer.tag(2, WireType.Varint).int32(message.color);
        let u = options.writeUnknownFields;
        if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proton_pass_vault_v1.VaultDisplayPreferences
 */
export const VaultDisplayPreferences = new VaultDisplayPreferences$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Vault$Type extends MessageType<Vault> {
    constructor() {
        super('proton_pass_vault_v1.Vault', [
            { no: 1, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: 'description', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: 'display', kind: 'message', T: () => VaultDisplayPreferences },
        ]);
    }
    create(value?: PartialMessage<Vault>): Vault {
        const message = { name: '', description: '' };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined) reflectionMergePartial<Vault>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Vault): Vault {
        let message = target ?? this.create(),
            end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* proton_pass_vault_v1.VaultDisplayPreferences display */ 3:
                    message.display = VaultDisplayPreferences.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.display
                    );
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        );
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Vault, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== '') writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string description = 2; */
        if (message.description !== '') writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* proton_pass_vault_v1.VaultDisplayPreferences display = 3; */
        if (message.display)
            VaultDisplayPreferences.internalBinaryWrite(
                message.display,
                writer.tag(3, WireType.LengthDelimited).fork(),
                options
            ).join();
        let u = options.writeUnknownFields;
        if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proton_pass_vault_v1.Vault
 */
export const Vault = new Vault$Type();

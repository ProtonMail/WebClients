/* eslint-disable */
// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "item-v1.proto" (package "proton_pass_item_v1", syntax proto3)
// tslint:disable
import { WireType } from '@protobuf-ts/runtime';
import type { BinaryWriteOptions } from '@protobuf-ts/runtime';
import type { IBinaryWriter } from '@protobuf-ts/runtime';
import { UnknownFieldHandler } from '@protobuf-ts/runtime';
import type { BinaryReadOptions } from '@protobuf-ts/runtime';
import type { IBinaryReader } from '@protobuf-ts/runtime';
import type { PartialMessage } from '@protobuf-ts/runtime';
import { reflectionMergePartial } from '@protobuf-ts/runtime';
import { MESSAGE_TYPE } from '@protobuf-ts/runtime';
import { MessageType } from '@protobuf-ts/runtime';

// Item types

/**
 * @generated from protobuf message proton_pass_item_v1.ItemNote
 */
export interface ItemNote {}
/**
 * @generated from protobuf message proton_pass_item_v1.ItemLogin
 */
export interface ItemLogin {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
    /**
     * @generated from protobuf field: repeated string urls = 3;
     */
    urls: string[];
    /**
     * @generated from protobuf field: string totp_uri = 4;
     */
    totpUri: string;
}
/**
 * @generated from protobuf message proton_pass_item_v1.ItemAlias
 */
export interface ItemAlias {}
/**
 * @generated from protobuf message proton_pass_item_v1.ItemCreditCard
 */
export interface ItemCreditCard {
    /**
     * @generated from protobuf field: string cardholder_name = 1;
     */
    cardholderName: string;
    /**
     * @generated from protobuf field: proton_pass_item_v1.CardType card_type = 2;
     */
    cardType: CardType;
    /**
     * @generated from protobuf field: string number = 3;
     */
    number: string;
    /**
     * @generated from protobuf field: string verification_number = 4;
     */
    verificationNumber: string;
    /**
     * Expected format: YYYY-MM, always containing two numbers for the month, even if is 01
     *
     * @generated from protobuf field: string expiration_date = 5;
     */
    expirationDate: string;
    /**
     * @generated from protobuf field: string pin = 6;
     */
    pin: string;
}
/**
 * Client extras
 *
 * @generated from protobuf message proton_pass_item_v1.AllowedAndroidApp
 */
export interface AllowedAndroidApp {
    /**
     * @generated from protobuf field: string package_name = 1;
     */
    packageName: string;
    /**
     * @generated from protobuf field: repeated string hashes = 2;
     */
    hashes: string[];
    /**
     * @generated from protobuf field: string app_name = 3;
     */
    appName: string;
}
/**
 * @generated from protobuf message proton_pass_item_v1.AndroidSpecific
 */
export interface AndroidSpecific {
    /**
     * @generated from protobuf field: repeated proton_pass_item_v1.AllowedAndroidApp allowed_apps = 1;
     */
    allowedApps: AllowedAndroidApp[];
}
/**
 * @generated from protobuf message proton_pass_item_v1.PlatformSpecific
 */
export interface PlatformSpecific {
    /**
     * @generated from protobuf field: proton_pass_item_v1.AndroidSpecific android = 1;
     */
    android?: AndroidSpecific;
}
// Item

/**
 * @generated from protobuf message proton_pass_item_v1.ExtraTotp
 */
export interface ExtraTotp {
    /**
     * @generated from protobuf field: string totp_uri = 1;
     */
    totpUri: string;
}
/**
 * @generated from protobuf message proton_pass_item_v1.ExtraTextField
 */
export interface ExtraTextField {
    /**
     * @generated from protobuf field: string content = 1;
     */
    content: string;
}
/**
 * @generated from protobuf message proton_pass_item_v1.ExtraHiddenField
 */
export interface ExtraHiddenField {
    /**
     * @generated from protobuf field: string content = 1;
     */
    content: string;
}
/**
 * @generated from protobuf message proton_pass_item_v1.ExtraField
 */
export interface ExtraField {
    /**
     * @generated from protobuf field: string field_name = 1;
     */
    fieldName: string;
    /**
     * @generated from protobuf oneof: content
     */
    content:
        | {
              oneofKind: 'totp';
              /**
               * @generated from protobuf field: proton_pass_item_v1.ExtraTotp totp = 2;
               */
              totp: ExtraTotp;
          }
        | {
              oneofKind: 'text';
              /**
               * @generated from protobuf field: proton_pass_item_v1.ExtraTextField text = 3;
               */
              text: ExtraTextField;
          }
        | {
              oneofKind: 'hidden';
              /**
               * @generated from protobuf field: proton_pass_item_v1.ExtraHiddenField hidden = 4;
               */
              hidden: ExtraHiddenField;
          }
        | {
              oneofKind: undefined;
          };
}
/**
 * @generated from protobuf message proton_pass_item_v1.Metadata
 */
export interface Metadata {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string note = 2;
     */
    note: string;
    /**
     * @generated from protobuf field: string item_uuid = 3;
     */
    itemUuid: string;
}
/**
 * @generated from protobuf message proton_pass_item_v1.Content
 */
export interface Content {
    /**
     * @generated from protobuf oneof: content
     */
    content:
        | {
              oneofKind: 'note';
              /**
               * @generated from protobuf field: proton_pass_item_v1.ItemNote note = 2;
               */
              note: ItemNote;
          }
        | {
              oneofKind: 'login';
              /**
               * @generated from protobuf field: proton_pass_item_v1.ItemLogin login = 3;
               */
              login: ItemLogin;
          }
        | {
              oneofKind: 'alias';
              /**
               * @generated from protobuf field: proton_pass_item_v1.ItemAlias alias = 4;
               */
              alias: ItemAlias;
          }
        | {
              oneofKind: 'creditCard';
              /**
               * @generated from protobuf field: proton_pass_item_v1.ItemCreditCard credit_card = 5;
               */
              creditCard: ItemCreditCard;
          }
        | {
              oneofKind: undefined;
          };
}
/**
 * @generated from protobuf message proton_pass_item_v1.Item
 */
export interface Item {
    /**
     * @generated from protobuf field: proton_pass_item_v1.Metadata metadata = 1;
     */
    metadata?: Metadata;
    /**
     * @generated from protobuf field: proton_pass_item_v1.Content content = 2;
     */
    content?: Content;
    /**
     * @generated from protobuf field: proton_pass_item_v1.PlatformSpecific platform_specific = 3;
     */
    platformSpecific?: PlatformSpecific;
    /**
     * @generated from protobuf field: repeated proton_pass_item_v1.ExtraField extra_fields = 4;
     */
    extraFields: ExtraField[];
}
/**
 * Credit cards
 *
 * @generated from protobuf enum proton_pass_item_v1.CardType
 */
export enum CardType {
    /**
     * @generated from protobuf enum value: Unspecified = 0;
     */
    Unspecified = 0,
    /**
     * @generated from protobuf enum value: Other = 1;
     */
    Other = 1,
    /**
     * @generated from protobuf enum value: Visa = 2;
     */
    Visa = 2,
    /**
     * @generated from protobuf enum value: Mastercard = 3;
     */
    Mastercard = 3,
    /**
     * @generated from protobuf enum value: AmericanExpress = 4;
     */
    AmericanExpress = 4,
}
// @generated message type with reflection information, may provide speed optimized methods
class ItemNote$Type extends MessageType<ItemNote> {
    constructor() {
        super('proton_pass_item_v1.ItemNote', []);
    }
    create(value?: PartialMessage<ItemNote>): ItemNote {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined) reflectionMergePartial<ItemNote>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemNote): ItemNote {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ItemNote, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proton_pass_item_v1.ItemNote
 */
export const ItemNote = new ItemNote$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ItemLogin$Type extends MessageType<ItemLogin> {
    constructor() {
        super('proton_pass_item_v1.ItemLogin', [
            { no: 1, name: 'username', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: 'password', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: 'urls', kind: 'scalar', repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: 'totp_uri', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
        ]);
    }
    create(value?: PartialMessage<ItemLogin>): ItemLogin {
        const message = { username: '', password: '', urls: [], totpUri: '' };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined) reflectionMergePartial<ItemLogin>(this, message, value);
        return message;
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ItemLogin
    ): ItemLogin {
        let message = target ?? this.create(),
            end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                case /* repeated string urls */ 3:
                    message.urls.push(reader.string());
                    break;
                case /* string totp_uri */ 4:
                    message.totpUri = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        );
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ItemLogin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== '') writer.tag(1, WireType.LengthDelimited).string(message.username);
        /* string password = 2; */
        if (message.password !== '') writer.tag(2, WireType.LengthDelimited).string(message.password);
        /* repeated string urls = 3; */
        for (let i = 0; i < message.urls.length; i++) writer.tag(3, WireType.LengthDelimited).string(message.urls[i]);
        /* string totp_uri = 4; */
        if (message.totpUri !== '') writer.tag(4, WireType.LengthDelimited).string(message.totpUri);
        let u = options.writeUnknownFields;
        if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proton_pass_item_v1.ItemLogin
 */
export const ItemLogin = new ItemLogin$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ItemAlias$Type extends MessageType<ItemAlias> {
    constructor() {
        super('proton_pass_item_v1.ItemAlias', []);
    }
    create(value?: PartialMessage<ItemAlias>): ItemAlias {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined) reflectionMergePartial<ItemAlias>(this, message, value);
        return message;
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ItemAlias
    ): ItemAlias {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ItemAlias, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proton_pass_item_v1.ItemAlias
 */
export const ItemAlias = new ItemAlias$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ItemCreditCard$Type extends MessageType<ItemCreditCard> {
    constructor() {
        super('proton_pass_item_v1.ItemCreditCard', [
            { no: 1, name: 'cardholder_name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: 'card_type', kind: 'enum', T: () => ['proton_pass_item_v1.CardType', CardType] },
            { no: 3, name: 'number', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: 'verification_number', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: 'expiration_date', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: 'pin', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
        ]);
    }
    create(value?: PartialMessage<ItemCreditCard>): ItemCreditCard {
        const message = {
            cardholderName: '',
            cardType: 0,
            number: '',
            verificationNumber: '',
            expirationDate: '',
            pin: '',
        };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined) reflectionMergePartial<ItemCreditCard>(this, message, value);
        return message;
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ItemCreditCard
    ): ItemCreditCard {
        let message = target ?? this.create(),
            end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cardholder_name */ 1:
                    message.cardholderName = reader.string();
                    break;
                case /* proton_pass_item_v1.CardType card_type */ 2:
                    message.cardType = reader.int32();
                    break;
                case /* string number */ 3:
                    message.number = reader.string();
                    break;
                case /* string verification_number */ 4:
                    message.verificationNumber = reader.string();
                    break;
                case /* string expiration_date */ 5:
                    message.expirationDate = reader.string();
                    break;
                case /* string pin */ 6:
                    message.pin = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        );
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ItemCreditCard, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cardholder_name = 1; */
        if (message.cardholderName !== '') writer.tag(1, WireType.LengthDelimited).string(message.cardholderName);
        /* proton_pass_item_v1.CardType card_type = 2; */
        if (message.cardType !== 0) writer.tag(2, WireType.Varint).int32(message.cardType);
        /* string number = 3; */
        if (message.number !== '') writer.tag(3, WireType.LengthDelimited).string(message.number);
        /* string verification_number = 4; */
        if (message.verificationNumber !== '')
            writer.tag(4, WireType.LengthDelimited).string(message.verificationNumber);
        /* string expiration_date = 5; */
        if (message.expirationDate !== '') writer.tag(5, WireType.LengthDelimited).string(message.expirationDate);
        /* string pin = 6; */
        if (message.pin !== '') writer.tag(6, WireType.LengthDelimited).string(message.pin);
        let u = options.writeUnknownFields;
        if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proton_pass_item_v1.ItemCreditCard
 */
export const ItemCreditCard = new ItemCreditCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AllowedAndroidApp$Type extends MessageType<AllowedAndroidApp> {
    constructor() {
        super('proton_pass_item_v1.AllowedAndroidApp', [
            { no: 1, name: 'package_name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: 'hashes', kind: 'scalar', repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: 'app_name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
        ]);
    }
    create(value?: PartialMessage<AllowedAndroidApp>): AllowedAndroidApp {
        const message = { packageName: '', hashes: [], appName: '' };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined) reflectionMergePartial<AllowedAndroidApp>(this, message, value);
        return message;
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: AllowedAndroidApp
    ): AllowedAndroidApp {
        let message = target ?? this.create(),
            end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string package_name */ 1:
                    message.packageName = reader.string();
                    break;
                case /* repeated string hashes */ 2:
                    message.hashes.push(reader.string());
                    break;
                case /* string app_name */ 3:
                    message.appName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        );
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AllowedAndroidApp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string package_name = 1; */
        if (message.packageName !== '') writer.tag(1, WireType.LengthDelimited).string(message.packageName);
        /* repeated string hashes = 2; */
        for (let i = 0; i < message.hashes.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.hashes[i]);
        /* string app_name = 3; */
        if (message.appName !== '') writer.tag(3, WireType.LengthDelimited).string(message.appName);
        let u = options.writeUnknownFields;
        if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proton_pass_item_v1.AllowedAndroidApp
 */
export const AllowedAndroidApp = new AllowedAndroidApp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AndroidSpecific$Type extends MessageType<AndroidSpecific> {
    constructor() {
        super('proton_pass_item_v1.AndroidSpecific', [
            {
                no: 1,
                name: 'allowed_apps',
                kind: 'message',
                repeat: 1 /*RepeatType.PACKED*/,
                T: () => AllowedAndroidApp,
            },
        ]);
    }
    create(value?: PartialMessage<AndroidSpecific>): AndroidSpecific {
        const message = { allowedApps: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined) reflectionMergePartial<AndroidSpecific>(this, message, value);
        return message;
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: AndroidSpecific
    ): AndroidSpecific {
        let message = target ?? this.create(),
            end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated proton_pass_item_v1.AllowedAndroidApp allowed_apps */ 1:
                    message.allowedApps.push(AllowedAndroidApp.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        );
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AndroidSpecific, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated proton_pass_item_v1.AllowedAndroidApp allowed_apps = 1; */
        for (let i = 0; i < message.allowedApps.length; i++)
            AllowedAndroidApp.internalBinaryWrite(
                message.allowedApps[i],
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join();
        let u = options.writeUnknownFields;
        if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proton_pass_item_v1.AndroidSpecific
 */
export const AndroidSpecific = new AndroidSpecific$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlatformSpecific$Type extends MessageType<PlatformSpecific> {
    constructor() {
        super('proton_pass_item_v1.PlatformSpecific', [
            { no: 1, name: 'android', kind: 'message', T: () => AndroidSpecific },
        ]);
    }
    create(value?: PartialMessage<PlatformSpecific>): PlatformSpecific {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined) reflectionMergePartial<PlatformSpecific>(this, message, value);
        return message;
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: PlatformSpecific
    ): PlatformSpecific {
        let message = target ?? this.create(),
            end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proton_pass_item_v1.AndroidSpecific android */ 1:
                    message.android = AndroidSpecific.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.android
                    );
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        );
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlatformSpecific, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proton_pass_item_v1.AndroidSpecific android = 1; */
        if (message.android)
            AndroidSpecific.internalBinaryWrite(
                message.android,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join();
        let u = options.writeUnknownFields;
        if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proton_pass_item_v1.PlatformSpecific
 */
export const PlatformSpecific = new PlatformSpecific$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExtraTotp$Type extends MessageType<ExtraTotp> {
    constructor() {
        super('proton_pass_item_v1.ExtraTotp', [
            { no: 1, name: 'totp_uri', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
        ]);
    }
    create(value?: PartialMessage<ExtraTotp>): ExtraTotp {
        const message = { totpUri: '' };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined) reflectionMergePartial<ExtraTotp>(this, message, value);
        return message;
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ExtraTotp
    ): ExtraTotp {
        let message = target ?? this.create(),
            end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string totp_uri */ 1:
                    message.totpUri = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        );
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExtraTotp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string totp_uri = 1; */
        if (message.totpUri !== '') writer.tag(1, WireType.LengthDelimited).string(message.totpUri);
        let u = options.writeUnknownFields;
        if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proton_pass_item_v1.ExtraTotp
 */
export const ExtraTotp = new ExtraTotp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExtraTextField$Type extends MessageType<ExtraTextField> {
    constructor() {
        super('proton_pass_item_v1.ExtraTextField', [
            { no: 1, name: 'content', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
        ]);
    }
    create(value?: PartialMessage<ExtraTextField>): ExtraTextField {
        const message = { content: '' };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined) reflectionMergePartial<ExtraTextField>(this, message, value);
        return message;
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ExtraTextField
    ): ExtraTextField {
        let message = target ?? this.create(),
            end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string content */ 1:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        );
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExtraTextField, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string content = 1; */
        if (message.content !== '') writer.tag(1, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proton_pass_item_v1.ExtraTextField
 */
export const ExtraTextField = new ExtraTextField$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExtraHiddenField$Type extends MessageType<ExtraHiddenField> {
    constructor() {
        super('proton_pass_item_v1.ExtraHiddenField', [
            { no: 1, name: 'content', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
        ]);
    }
    create(value?: PartialMessage<ExtraHiddenField>): ExtraHiddenField {
        const message = { content: '' };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined) reflectionMergePartial<ExtraHiddenField>(this, message, value);
        return message;
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ExtraHiddenField
    ): ExtraHiddenField {
        let message = target ?? this.create(),
            end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string content */ 1:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        );
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExtraHiddenField, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string content = 1; */
        if (message.content !== '') writer.tag(1, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proton_pass_item_v1.ExtraHiddenField
 */
export const ExtraHiddenField = new ExtraHiddenField$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExtraField$Type extends MessageType<ExtraField> {
    constructor() {
        super('proton_pass_item_v1.ExtraField', [
            { no: 1, name: 'field_name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: 'totp', kind: 'message', oneof: 'content', T: () => ExtraTotp },
            { no: 3, name: 'text', kind: 'message', oneof: 'content', T: () => ExtraTextField },
            { no: 4, name: 'hidden', kind: 'message', oneof: 'content', T: () => ExtraHiddenField },
        ]);
    }
    create(value?: PartialMessage<ExtraField>): ExtraField {
        const message = { fieldName: '', content: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined) reflectionMergePartial<ExtraField>(this, message, value);
        return message;
    }
    internalBinaryRead(
        reader: IBinaryReader,
        length: number,
        options: BinaryReadOptions,
        target?: ExtraField
    ): ExtraField {
        let message = target ?? this.create(),
            end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string field_name */ 1:
                    message.fieldName = reader.string();
                    break;
                case /* proton_pass_item_v1.ExtraTotp totp */ 2:
                    message.content = {
                        oneofKind: 'totp',
                        totp: ExtraTotp.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            (message.content as any).totp
                        ),
                    };
                    break;
                case /* proton_pass_item_v1.ExtraTextField text */ 3:
                    message.content = {
                        oneofKind: 'text',
                        text: ExtraTextField.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            (message.content as any).text
                        ),
                    };
                    break;
                case /* proton_pass_item_v1.ExtraHiddenField hidden */ 4:
                    message.content = {
                        oneofKind: 'hidden',
                        hidden: ExtraHiddenField.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            (message.content as any).hidden
                        ),
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        );
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExtraField, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string field_name = 1; */
        if (message.fieldName !== '') writer.tag(1, WireType.LengthDelimited).string(message.fieldName);
        /* proton_pass_item_v1.ExtraTotp totp = 2; */
        if (message.content.oneofKind === 'totp')
            ExtraTotp.internalBinaryWrite(
                message.content.totp,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join();
        /* proton_pass_item_v1.ExtraTextField text = 3; */
        if (message.content.oneofKind === 'text')
            ExtraTextField.internalBinaryWrite(
                message.content.text,
                writer.tag(3, WireType.LengthDelimited).fork(),
                options
            ).join();
        /* proton_pass_item_v1.ExtraHiddenField hidden = 4; */
        if (message.content.oneofKind === 'hidden')
            ExtraHiddenField.internalBinaryWrite(
                message.content.hidden,
                writer.tag(4, WireType.LengthDelimited).fork(),
                options
            ).join();
        let u = options.writeUnknownFields;
        if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proton_pass_item_v1.ExtraField
 */
export const ExtraField = new ExtraField$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Metadata$Type extends MessageType<Metadata> {
    constructor() {
        super('proton_pass_item_v1.Metadata', [
            { no: 1, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: 'note', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: 'item_uuid', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
        ]);
    }
    create(value?: PartialMessage<Metadata>): Metadata {
        const message = { name: '', note: '', itemUuid: '' };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined) reflectionMergePartial<Metadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Metadata): Metadata {
        let message = target ?? this.create(),
            end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string note */ 2:
                    message.note = reader.string();
                    break;
                case /* string item_uuid */ 3:
                    message.itemUuid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        );
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Metadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== '') writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string note = 2; */
        if (message.note !== '') writer.tag(2, WireType.LengthDelimited).string(message.note);
        /* string item_uuid = 3; */
        if (message.itemUuid !== '') writer.tag(3, WireType.LengthDelimited).string(message.itemUuid);
        let u = options.writeUnknownFields;
        if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proton_pass_item_v1.Metadata
 */
export const Metadata = new Metadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Content$Type extends MessageType<Content> {
    constructor() {
        super('proton_pass_item_v1.Content', [
            { no: 2, name: 'note', kind: 'message', oneof: 'content', T: () => ItemNote },
            { no: 3, name: 'login', kind: 'message', oneof: 'content', T: () => ItemLogin },
            { no: 4, name: 'alias', kind: 'message', oneof: 'content', T: () => ItemAlias },
            { no: 5, name: 'credit_card', kind: 'message', oneof: 'content', T: () => ItemCreditCard },
        ]);
    }
    create(value?: PartialMessage<Content>): Content {
        const message = { content: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined) reflectionMergePartial<Content>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Content): Content {
        let message = target ?? this.create(),
            end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proton_pass_item_v1.ItemNote note */ 2:
                    message.content = {
                        oneofKind: 'note',
                        note: ItemNote.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            (message.content as any).note
                        ),
                    };
                    break;
                case /* proton_pass_item_v1.ItemLogin login */ 3:
                    message.content = {
                        oneofKind: 'login',
                        login: ItemLogin.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            (message.content as any).login
                        ),
                    };
                    break;
                case /* proton_pass_item_v1.ItemAlias alias */ 4:
                    message.content = {
                        oneofKind: 'alias',
                        alias: ItemAlias.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            (message.content as any).alias
                        ),
                    };
                    break;
                case /* proton_pass_item_v1.ItemCreditCard credit_card */ 5:
                    message.content = {
                        oneofKind: 'creditCard',
                        creditCard: ItemCreditCard.internalBinaryRead(
                            reader,
                            reader.uint32(),
                            options,
                            (message.content as any).creditCard
                        ),
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        );
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Content, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proton_pass_item_v1.ItemNote note = 2; */
        if (message.content.oneofKind === 'note')
            ItemNote.internalBinaryWrite(
                message.content.note,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join();
        /* proton_pass_item_v1.ItemLogin login = 3; */
        if (message.content.oneofKind === 'login')
            ItemLogin.internalBinaryWrite(
                message.content.login,
                writer.tag(3, WireType.LengthDelimited).fork(),
                options
            ).join();
        /* proton_pass_item_v1.ItemAlias alias = 4; */
        if (message.content.oneofKind === 'alias')
            ItemAlias.internalBinaryWrite(
                message.content.alias,
                writer.tag(4, WireType.LengthDelimited).fork(),
                options
            ).join();
        /* proton_pass_item_v1.ItemCreditCard credit_card = 5; */
        if (message.content.oneofKind === 'creditCard')
            ItemCreditCard.internalBinaryWrite(
                message.content.creditCard,
                writer.tag(5, WireType.LengthDelimited).fork(),
                options
            ).join();
        let u = options.writeUnknownFields;
        if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proton_pass_item_v1.Content
 */
export const Content = new Content$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Item$Type extends MessageType<Item> {
    constructor() {
        super('proton_pass_item_v1.Item', [
            { no: 1, name: 'metadata', kind: 'message', T: () => Metadata },
            { no: 2, name: 'content', kind: 'message', T: () => Content },
            { no: 3, name: 'platform_specific', kind: 'message', T: () => PlatformSpecific },
            { no: 4, name: 'extra_fields', kind: 'message', repeat: 1 /*RepeatType.PACKED*/, T: () => ExtraField },
        ]);
    }
    create(value?: PartialMessage<Item>): Item {
        const message = { extraFields: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined) reflectionMergePartial<Item>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Item): Item {
        let message = target ?? this.create(),
            end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proton_pass_item_v1.Metadata metadata */ 1:
                    message.metadata = Metadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* proton_pass_item_v1.Content content */ 2:
                    message.content = Content.internalBinaryRead(reader, reader.uint32(), options, message.content);
                    break;
                case /* proton_pass_item_v1.PlatformSpecific platform_specific */ 3:
                    message.platformSpecific = PlatformSpecific.internalBinaryRead(
                        reader,
                        reader.uint32(),
                        options,
                        message.platformSpecific
                    );
                    break;
                case /* repeated proton_pass_item_v1.ExtraField extra_fields */ 4:
                    message.extraFields.push(ExtraField.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === 'throw')
                        throw new globalThis.Error(
                            `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
                        );
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Item, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proton_pass_item_v1.Metadata metadata = 1; */
        if (message.metadata)
            Metadata.internalBinaryWrite(
                message.metadata,
                writer.tag(1, WireType.LengthDelimited).fork(),
                options
            ).join();
        /* proton_pass_item_v1.Content content = 2; */
        if (message.content)
            Content.internalBinaryWrite(
                message.content,
                writer.tag(2, WireType.LengthDelimited).fork(),
                options
            ).join();
        /* proton_pass_item_v1.PlatformSpecific platform_specific = 3; */
        if (message.platformSpecific)
            PlatformSpecific.internalBinaryWrite(
                message.platformSpecific,
                writer.tag(3, WireType.LengthDelimited).fork(),
                options
            ).join();
        /* repeated proton_pass_item_v1.ExtraField extra_fields = 4; */
        for (let i = 0; i < message.extraFields.length; i++)
            ExtraField.internalBinaryWrite(
                message.extraFields[i],
                writer.tag(4, WireType.LengthDelimited).fork(),
                options
            ).join();
        let u = options.writeUnknownFields;
        if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proton_pass_item_v1.Item
 */
export const Item = new Item$Type();

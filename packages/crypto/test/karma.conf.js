const path = require('path');
const os = require('os');
const { firefox, chromium } = require('playwright');
process.env.CHROME_BIN = chromium.executablePath();
process.env.FIREFOX_BIN = firefox.executablePath();

/**
 * Karma does not automatically serve the bundled webworker asset generated by webpack,
 * so we need to manually reference and expose the webpack temporary output dir.
 * See: https://github.com/ryanclark/karma-webpack/issues/498#issuecomment-790040818
 */
const karmaWebpackOutputPath = path.join(os.tmpdir(), '_karma_webpack_') + Math.floor(Math.random() * 1000000);

module.exports = function (config) {
    config.set({
        // base path that will be used to resolve all patterns (eg. files, exclude)
        basePath: '..',

        // frameworks to use
        // available frameworks: https://www.npmjs.com/search?q=keywords:karma-adapter
        frameworks: ['mocha', 'webpack'],

        plugins: [
            'karma-mocha',
            'karma-chrome-launcher',
            'karma-firefox-launcher',
            'karma-webpack',
            'karma-mocha-reporter',
        ],

        // list of files / patterns to load in the browser
        files: [
            { pattern: 'test/**/!(karma.conf).*', watched: false },
            {
                pattern: `${karmaWebpackOutputPath}/**/*`,
                watched: false,
                included: false,
                served: true,
            },
        ],

        // list of files / patterns to exclude
        exclude: [],

        // preprocess matching files before serving them to the browser
        // available preprocessors: https://www.npmjs.com/search?q=keywords:karma-preprocessor
        preprocessors: {
            'test/**/*.*': 'webpack',
        },

        webpack: {
            output: {
                path: karmaWebpackOutputPath,
            },

            resolve: {
                fallback: {
                    stream: false,
                    buffer: false,
                },
                extensions: ['', '.js', '.ts'],
            },
            module: {
                rules: [
                    {
                        test: /\.ts?$/,
                        use: [
                            {
                                loader: 'ts-loader',
                                options: {
                                    compilerOptions: { noEmit: false },
                                    allowTsInNodeModules: true,
                                },
                            },
                        ],
                        exclude: /node_modules\/(?!.*(pmcrypto))/,
                    },
                ],
            },
        },

        // available reporters: https://www.npmjs.com/search?q=keywords:karma-reporter
        reporters: ['mocha'],

        // web server port
        port: 9876,

        // enable / disable colors in the output (reporters and logs)
        colors: true,

        // level of logging
        // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG
        logLevel: config.LOG_INFO,

        // enable / disable watching file and executing tests whenever any file changes
        autoWatch: false,

        customLaunchers: {
            ChromeHeadlessCI: {
                base: 'ChromeHeadless',
                flags: ['--no-sandbox'],
            },
        },
        browsers: ['ChromeHeadlessCI', 'FirefoxHeadless'],

        // Continuous Integration mode
        // if true, Karma captures browsers, runs the tests and exits
        singleRun: true,

        // Concurrency level
        // how many browser instances should be started simultaneously
        concurrency: Infinity,

        client: {
            mocha: {
                // timeout for mocha tests, default is 2 seconds. Some streaming tests can take longer.
                timeout: 5000,
            },
        },
    });
};

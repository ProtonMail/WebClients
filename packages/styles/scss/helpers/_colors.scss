@each $color in (primary, danger, warning, success, info) {
	$prefix: if($color != 'primary', 'signal', '');

	.bg-#{$color} {
		background-color: var(--#{dash-join($prefix, $color)});
		color: var(--#{dash-join($prefix, $color, 'contrast')});

		*:is(a, .link, .button-link, [class*='button-ghost'], [class*='button-underline'], [class*='button-outline']) {
			color: inherit;
		}

		[class*='button-outline'] {
			--button-default-border-color: currentColor;
			--button-hover-border-color: currentColor;
			--button-active-border-color: currentColor;
		}

		// Set same backgrounds as solid shape
		[class*='button-outline-#{$color}'] {
			--button-default-background-color: var(--#{dash-join($prefix, $color)});
			--button-hover-background-color: var(--#{dash-join($prefix, $color, 'major-1')});
			--button-active-background-color: var(--#{dash-join($prefix, $color, 'major-2')});
		}
	}

	.color-#{$color} {
		color: var(--#{dash-join($prefix, $color)});
	}

	.fill-#{$color} {
		fill: var(--#{dash-join($prefix, $color)});
	}
}

@each $color in (norm, weak, strong) {
	.bg-#{$color} {
		background-color: var(--background-#{$color});
	}

	.bg-#{$color}-odd > *:nth-child(odd) {
		background-color: var(--background-#{$color});
	}

	.bg-#{$color}-even > *:nth-child(even) {
		background-color: var(--background-#{$color});
	}
}

@each $color in (norm, weak, hint, disabled, invert) {
	.color-#{$color} {
		color: var(--text-#{$color});
	}
}

.color-inherit {
	color: inherit;

	&:is(a, .link, .button-link, [class*='button-ghost'], [class*='button-underline'], [class*='button-outline']) {
		&:hover,
		&:focus,
		&:active {
			color: inherit;
		}
	}
}

.fill-currentColor {
	fill: currentColor;
}

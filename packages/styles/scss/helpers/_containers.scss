.border {
	border: 1px solid var(--border-norm);
}

@each $placement in (top, right, bottom, left) {
	.border-#{$placement} {
		border-#{placement-to-logical($placement)}: 1px solid var(--border-norm);
	}
}

@each $color in (primary, norm, weak, danger, warning, success, info) {
	// Initialize namespace
	$prefix: '';

	@if $color == 'norm' or $color == 'weak' {
		$prefix: 'border-';
	}

	@if $color == 'danger' or $color == 'warning' or $color == 'success' or $color == 'info' {
		$prefix: 'signal-';
	}

	.border-#{$color} {
		border-color: var(--#{$prefix + $color});
	}
}

.border-currentColor {
	border-color: currentColor;
}

.border-dashed {
	border-style: dashed;
}

.border-collapse {
	border-collapse: collapse;
}

.border-none {
	border: none;
}

.border-bottom-children {
	> * {
		border-block-end: 1px solid var(--border-norm);
	}
	&--not-last {
		& > :last-child {
			border-block-end: 0;
		}
	}
}

.shadow-norm {
	box-shadow: var(--shadow-norm);
}

.shadow-lifted {
	box-shadow: var(--shadow-lifted);
}

.rounded-sm {
	border-radius: var(--border-radius-sm);
}

.rounded {
	border-radius: var(--border-radius-md);
}

.rounded-lg {
	border-radius: var(--border-radius-lg);
}

.rounded-xl {
	border-radius: var(--border-radius-xl);
}

.rounded-full {
	border-radius: var(--border-radius-full);
}

.rounded-50 {
	border-radius: 50%;
}

.rounded-none {
	border-radius: 0;
}

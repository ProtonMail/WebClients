/*
 * Button shape
 */
.button {
	display: inline-block;
	padding-block: em(7);
	padding-inline: em(16);

	// usage of box-shadow instead of border to enable increasing size of _visual_ border without shifting button size
	box-shadow: inset 0 0 0 var(--button-default-border-width, 0) var(--button-default-border-color, transparent);

	border: none;
	border-radius: var(--border-radius-medium);
	outline: none; // be careful of a11y
	@supports selector(:focus-visible) {
		// had to do this because of Safari
		outline: unset;
	}
	background-color: var(--button-default-background-color, transparent);
	color: var(--button-default-text-color, inherit);
	text-align: center;
	transition: 0.15s easing(easeOutQuint), background-position 0s;

	&,
	&:hover,
	&:focus,
	&:focus-within,
	&:active {
		text-decoration: none;
	}

	&:hover,
	&:focus,
	&:focus-within,
	&.is-hover {
		box-shadow: inset 0 0 0 var(--button-hover-border-width, 0) var(--button-hover-border-color, transparent);
		background-color: var(--button-hover-background-color, transparent);
		color: var(--button-hover-text-color, inherit);
		opacity: 1; // In case the button is invisible as default
	}

	&:active,
	&.is-active,
	// When clicking on a button to expand a container, we usually don't need to specify the `aria-controls` attribute
	// because the expanded container is right next to that button, so the `aria-expanded` style makes sense,
	// but in some cases that expanded container isn't so obviously visually connected to that button, so we use
	// `aria-controls` to specify it, and avoid the `aria-expanded` style in the same time.
	&[aria-expanded='true']:not([aria-controls]) {
		box-shadow: inset 0 0 0 var(--button-active-border-width, 0) var(--button-active-border-color, transparent);
		background-color: var(--button-active-background-color, transparent);
		color: var(--button-active-text-color, inherit);
		opacity: 1; // In case the button is invisible as default
	}

	&[disabled],
	&.is-disabled {
		pointer-events: none;

		&:not([aria-busy='true']) {
			opacity: 0.5;
		}
	}

	&[aria-expanded='true'] .caret-like {
		@extend .rotateX-180;
	}
}

/*
 * Link shape
 */
.button-link {
	display: inline-block;
	padding-block: em(5) em(6);
	padding-inline: 0;
	outline: none; // be careful of a11y
	color: var(--button-default-text-color, inherit);
	text-decoration: underline;

	&:hover,
	&:focus,
	&:focus-within,
	&:active {
		text-decoration: none;
	}

	&:hover,
	&:focus,
	&:focus-within {
		color: var(--button-hover-text-color, inherit);
	}

	&:active,
	&.is-active {
		color: var(--button-active-text-color, inherit);
	}

	&[disabled],
	&.is-disabled {
		pointer-events: none;

		&:not([aria-busy='true']) {
			opacity: 0.5;
		}
	}
}

/*
 * Button variants
 */
@each $color in (norm, weak, danger, warning, success, info) {
	// Initialize namespace
	$group: 'signal-';
	@if $color == 'norm' or $color == 'weak' {
		$group: 'interaction-';
	}

	// Default colors definition
	$textColor: var(--#{$group + $color});
	$hoverTextColor: var(--#{$group + $color}-hover);
	$activeTextColor: var(--#{$group + $color}-active);

	@if $color == 'norm' {
		$textColor: var(--interaction-norm-accent, var(--interaction-norm));
		$hoverTextColor: var(--interaction-norm-accent-hover, var(--interaction-norm-hover));
		$activeTextColor: var(--interaction-norm-accent-active, var(--interaction-norm-active));
	}

	@if $color == 'weak' {
		$textColor: var(--text-norm);
		$hoverTextColor: var(--text-norm);
		$activeTextColor: var(--text-norm);
	}

	// Default shape
	.button-solid-#{$color} {
		$solidDefaultTextColor: #{$textColor};
		$solidHoverTextColor: #{$hoverTextColor};
		$solidActiveTextColor: #{$activeTextColor};

		@if $color != 'weak' {
			$solidDefaultTextColor: var(--#{$group + $color}-contrast);
			$solidHoverTextColor: var(--#{$group + $color}-contrast);
			$solidActiveTextColor: var(--#{$group + $color}-contrast);
		}

		--button-default-background-color: var(--#{$group + $color});
		--button-hover-background-color: var(--#{$group + $color}-hover);
		--button-active-background-color: var(--#{$group + $color}-active);
		--button-default-text-color: #{$solidDefaultTextColor};
		--button-hover-text-color: #{$solidHoverTextColor};
		--button-active-text-color: #{$solidActiveTextColor};
	}

	// Outline shape
	.button-outline-#{$color} {
		$defaultBorderColor: var(--#{$group + $color});
		$hoverBorderColor: var(--#{$group + $color}-hover);
		$activeBorderColor: var(--#{$group + $color}-active);

		@if $color == 'norm' {
			$defaultBorderColor: var(--interaction-norm-accent, var(--interaction-norm));
			$hoverBorderColor: var(--interaction-norm-accent-hover, var(--interaction-norm-hover));
			$activeBorderColor: var(--interaction-norm-accent-active, var(--interaction-norm-active));
		}

		--button-default-border-width: 1px;
		--button-hover-border-width: 2px;
		--button-active-border-width: 2px;
		--button-default-border-color: #{$defaultBorderColor};
		--button-hover-border-color: #{$hoverBorderColor};
		--button-active-border-color: #{$activeBorderColor};
		--button-default-text-color: #{$textColor};
		--button-hover-text-color: #{$hoverTextColor};
		--button-active-text-color: #{$activeTextColor};
	}

	// Ghost shape
	.button-ghost-#{$color} {
		--button-default-background-color: var(--interaction-default);
		--button-hover-background-color: var(--interaction-default-hover);
		--button-active-background-color: var(--interaction-default-active);
		--button-default-text-color: #{$textColor};
		--button-hover-text-color: #{$hoverTextColor};
		--button-active-text-color: #{$activeTextColor};
	}

	// Link shape
	.button-link-#{$color} {
		--button-default-text-color: #{$textColor};
		--button-hover-text-color: #{$hoverTextColor};
		--button-active-text-color: #{$activeTextColor};
	}
}

.resize-area-container {
	&:hover,
	&:focus,
	&:active {
		background: linear-gradient(
			90deg,
			transparent 0%,
			transparent 3px,
			var(--interaction-norm-hover) 3px,
			var(--interaction-norm-hover) 6px,
			transparent 6px
		);
	}
}

/*
 * Modifiers
 */

.button-small {
	padding-block: em(1) em(2); // 24px height
	padding-inline: em(12);
	border-radius: var(--border-radius-small);
}

.button-large {
	padding-block: em(9) em(10); // 40px height
	padding-inline: em(20);
}

.button-for-icon {
	padding-block: em(9.5); // To have same height as fields
	padding-inline: em(10);

	&.button-small {
		padding-block: em(4);
		padding-inline: em(6);
	}

	&.button-large {
		padding-block: em(12);
		padding-inline: em(14);
	}

	& > svg {
		display: block;
		transition: opacity 0.25s ease-out;
	}
}

// Loading state
.button[aria-busy='true'] {
	position: relative;

	.loader-container {
		position: absolute;
		display: flex;
		justify-content: center;
		align-items: center;
		animation: 0.25s ease-out both anime-loader-container-fade-in;

		@keyframes anime-loader-container-fade-in {
			from {
				opacity: 0;
			}
			to {
				opacity: 1;
			}
		}
	}

	&:not(.button-for-icon) {
		&:not(.w100) {
			&:not(.button-small, .button-large) {
				padding-inline-end: em(40);
			}

			&.button-small {
				padding-inline-end: em(36);
			}

			&.button-large {
				padding-inline-end: em(44);
			}
		}

		.loader-container {
			inset-block: 0;
		}

		&:not(.button-small, .button-large) .loader-container {
			inset-inline-end: em(16);
		}

		&.button-small .loader-container {
			inset-inline-end: em(12);
		}

		&.button-large .loader-container {
			inset-inline-end: em(20);
		}
	}

	&.button-for-icon {
		& > svg {
			opacity: 0;
		}

		.loader-container {
			inset: 0;
		}
	}
}

.button-pill {
	border-radius: 2em;
}

/*
 * Interactive gives only default colors on every states
 */
.interactive {
	outline: none; // be careful of a11y
	@supports selector(:focus-visible) {
		// had to do this because of Safari
		outline: unset;
	}
	background-color: var(--interaction-default);
	color: inherit;
	transition: 0.15s easing(easeOutQuint), background-position 0s;

	&:hover,
	&:focus,
	&:focus-within {
		background-color: var(--interaction-default-hover);
		color: inherit;
	}

	&:active,
	&.is-active,
	&[aria-expanded='true'] {
		background-color: var(--interaction-default-active);
		color: inherit;
	}

	&[disabled],
	&.is-disabled {
		pointer-events: none;

		&:not([aria-busy='true']) {
			opacity: 0.5;
		}
	}
}

.outline-offset-2p {
	outline-offset: -2px;
}

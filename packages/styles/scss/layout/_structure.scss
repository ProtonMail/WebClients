/* fix bug on Chrome */
body {
	@extend .no-scroll;
	block-size: 100%;
}

@include respond-to($breakpoint-large, 'min') {
	:root {
		--width-sidebar: #{rem(250)};
		--width-context-bar: #{rem(450)};
	}
}

/* === page === */
html,
.app-root,
.content-container {
	block-size: 100%;
}

.app-root-loader {
	position: fixed;
	inset: 0;
	// Static because css variables can't be reached on that components
	background: #1c223d;
	color: white;
}

.app-noscript {
	position: fixed;
	inset: 0;
	display: flex;
	justify-content: center;
	align-items: center;
	padding: 3em;
	font-size: 1.2em;
	// Static because css variables can't be reached on that components
	background: #1c223d;
	color: white;
}

.content {
	background-color: var(--sidebar-background-color);
	color: var(--sidebar-text-color, var(--text-norm));
}

.header {
	padding-block: rem(10);
	padding-inline: 0 rem(15);
	block-size: rem($header-height);
	flex-shrink: 0;
	background-color: var(--header-background-color);
	color: var(--header-text-color, var(--text-norm));
}

.sidebar {
	inline-size: var(--width-sidebar, #{rem($width-sidebar)});
	visibility: visible;
	transition: visibility 0s ease, transform 1s ease, width 0.6s ease, opacity 1s ease;
	transition-delay: 0s;
	overflow: auto;
	background-color: var(--sidebar-background-color);
	color: var(--sidebar-text-color, var(--text-norm));

	@include respond-to($breakpoint-small) {
		position: fixed;
		inset: 0;
		z-index: $layer-mobile-navigation;
		inline-size: 100%;
		max-inline-size: 100%;
		max-block-size: none;
		padding-block-start: 1em;
		transform-origin: 0 50%;
		transition: 0s visibility ease, 0.25s transform ease;
		transition-delay: 0s;

		&[data-expanded='false'] {
			transform: translateX(-100%);
			visibility: hidden;
			transition-delay: 0.25s, 0s;
		}

		&[aria-hidden='true'] {
			transform: translateX(0);
		}
	}
}

.logo-container {
	padding-block: 0;
	padding-inline: 1em;
	inline-size: var(--width-sidebar, #{rem($width-sidebar)});
}

.logo-link {
	@extend .interactive;

	position: relative;
	padding-block: 0.875em 1.125em;
	padding-inline: 0.5em;
	box-sizing: initial;

	.plan {
		position: absolute;
		inset-block-end: 0.5em;
		inset-inline-start: rem(32);
		font-size: rem(10);
		line-height: 1;
	}
}

.logo {
	block-size: rem(22);
}

.logo g {
	fill: currentColor;
}

.hamburger {
	@include respond-to($breakpoint-small) {
		flex-shrink: 0; // this has to stay
		margin-inline-end: 0.1em; // just for not touching the text on hover state :)
	}
}

.topnav-container {
	@include respond-to($breakpoint-small) {
		flex-shrink: 0; // this has to stay
		margin-inline-start: auto; // case of mail display
	}
}

.main {
	overflow: hidden;
	border-start-start-radius: 4px;
	border: solid var(--main-border-color);
	border-block-start-width: 1px;
	border-block-end-width: 0;
	border-inline-start-width: 1px;
	border-inline-end-width: 0;
	box-shadow: var(--main-box-shadow);

	@include respond-to($breakpoint-small) {
		margin-inline-end: 0;
		border-radius: 0;
	}
}

.main-area {
	background: var(--background-norm);
	color: var(--text-norm);
	overflow: auto;

	&.no-scroll {
		overflow: hidden;
	}
}

.main-area--with-toolbar {
	@extend .main-area;
	border-radius: 0;
}

// only for Safari mobile shitty way to handle vh unit
$height-for-tablet: 5em !default;
$height-for-mobile: 8em !default;

.main-area--padding-fix {
	padding-block-end: $height-for-tablet;
}

.main-area-content--padding-fix::after {
	content: '';
	display: flex;
	inline-size: 100%;
	block-size: $height-for-tablet;
}

@include respond-to($breakpoint-small) {
	.main-area--padding-fix {
		padding-block-end: $height-for-mobile;
		// thanks Apple for the fixed toolbar at the bottom
	}

	.main-area-content--padding-fix::after {
		block-size: $height-for-mobile;
	}
}

.main-full {
	block-size: 100%;
	overflow: auto;
	background-color: var(--background-norm);
}

.main-area--no-header {
	@extend .main-area;
	//height: 100vh; // create a crazy bug on Safari on VPN
	max-block-size: 100%;
}

.main-area--with-toolbar--no-header {
	@extend .main-area--with-toolbar;
}

.main-area-content {
	background: var(--background-norm);
}

.main-area--row-mode .items-column-list {
	inline-size: 100%;
	min-inline-size: initial;
	max-inline-size: initial;
}

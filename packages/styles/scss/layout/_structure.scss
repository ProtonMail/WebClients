@use 'sass:math';

@import '~@proton/styles/scss/lib';

/* fix bug on Chrome */
body {
	@extend .no-scroll;

	block-size: 100%;
}

/* === page === */
html,
.app-root,
.content-container {
	block-size: 100%;
}

.app-root-loader {
	position: fixed;
	inset: 0;

	// Static because css variables can't be reached on that components
	background: var(--background-norm, white);
	color: var(--text-norm, black);
}

.app-noscript {
	position: fixed;
	inset: 0;
	display: flex;
	justify-content: center;
	align-items: center;
	padding: 3em;
	font-size: 1.2em;

	// Static because css variables can't be reached on that components
	background: white;
	color: black;
}

.content {
	background-color: var(--sidebar-background-color);
	color: var(--sidebar-text-color, var(--text-norm));
}

.header {
	padding-block: var(--space-1);
	padding-inline: var(--space-3) var(--space-2);
	block-size: rem($header-height-small);
	flex-shrink: 0;
	background-color: var(--header-background-color);
	color: var(--header-text-color, var(--text-norm));

	@include media('>small') {
		padding-block: var(--space-3);
		padding-inline: var(--space-2) rem(10);
		block-size: rem($header-height);
	}

	&--drawer {
		block-size: rem($header-height);
	}
}

.searchbox {
	--field-background-color: var(--background-weak);
	--field-hover-background-color: var(--field-background-color);
	--field-focus-background-color: var(--search-field-focus-background);
	--field-disabled-background-color: var(--field-background-color);

	inline-size: clamp(
		#{rem(340)},
		calc(100vw * #{math.div($conversations-column-width, 100%)} - #{rem(20)}),
		#{rem(520)}
	);
	max-inline-size: 100%;
	min-inline-size: rem(340);

	&--adaptWidth {
		inline-size: clamp(
			340px,
			calc(var(--width-conversation-column, calc(100vw * #{math.div($conversations-column-width, 100%)})) - #{rem(20)}),
			#{rem(520)}
		);
		max-inline-size: calc(
			100vw - #{rem(450)} - #{$width-sidebar}px - #{rem(20)} - var(--drawer-width)
		); // Same max width as list
	}

	.input {
		--field-text-color: var(--color-weak);
		--field-placeholder-color: var(--text-weak);

		border-color: var(--background-weak);
		block-size: rem(36);
		line-height: 1;
	}

	button {
		--button-default-text-color: var(--color-weak);
	}
}

.footer {
	padding-block: rem(10);
	padding-inline: 0 rem(15);
	flex-shrink: 0;
	background-color: var(--header-background-color);
	color: var(--header-text-color, var(--text-norm));
}

.sidebar {
	inline-size: rem($width-sidebar);
	visibility: visible;
	transition: visibility 0s ease, transform 0s ease, inline-size 0s ease, opacity 1s ease;
	transition-delay: 0s;
	overflow: auto;
	background-color: var(--sidebar-background-color);
	color: var(--sidebar-text-color, var(--text-norm));

	@include media('<=small') {
		position: fixed;
		inset: 0;
		z-index: $layer-mobile-navigation;
		inline-size: 100%;
		max-inline-size: rem(272);
		max-block-size: none;
		padding-block-start: 1em;
		transform-origin: 0 50%;
		transition: 0s visibility ease, 0.25s transform ease, inline-size 0s ease, opacity 1s ease;
		transition-delay: 0s;

		&[data-expanded='false'] {
			transform: translateX(-100%);
			@at-root {
				[dir='rtl'] & {
					transform: translateX(100%);
				}
			}

			visibility: hidden;
			transition-delay: 0.25s, 0s;
		}

		&[aria-hidden='true'] {
			transform: translateX(0);
		}
	}

	&-backdrop {
		display: none;

		@include media('<=small') {
			display: block;
			background-color: var(--backdrop-norm);
			position: fixed;
			inset: 0;
			z-index: $layer-mobile-navigation - 1;
		}
	}
}

.logo-container {
	padding-block: 0;
	padding-inline: var(--space-4);

	& > a {
		display: flex;
		align-self: baseline;

		&::after {
			border-radius: var(--border-radius-md);
		}
	}

	@include media('>small') {
		block-size: rem($header-height);
		inline-size: rem($width-sidebar);

		& > a {
			align-self: center;
		}
	}
}

.hamburger {
	@include media('<=small') {
		flex-shrink: 0; // this has to stay
		margin-inline-end: 0.1em; // just for not touching the text on hover state :)
	}
}

.topnav-container {
	@include media('<=small') {
		flex-shrink: 0; // this has to stay
		margin-inline-start: auto; // case of mail display
	}
}

.main {
	overflow: hidden;
	border-inline-start: var(--main-border-width) solid var(--border-weak);
	box-shadow: var(--main-box-shadow);
	background: var(--background-norm);

	@include media('<=small') {
		margin-inline-end: 0;
		border-radius: 0;
		border-inline-start-width: 0;

		// Drawer specific
		border-start-end-radius: 0;
		border-inline-end-width: 0;
	}
}

.main-area {
	color: var(--text-norm);
	overflow: auto;

	&.no-scroll {
		overflow: hidden;
	}

	&-border {
		border-block-start: 1px solid var(--border-weak);
	}

	&-rounded--left {
		@include media('>small') {
			border-inline-start: 1px solid var(--border-weak);
			border-start-start-radius: var(--border-radius-lg);
		}
	}

	&-rounded--right {
		@include media('>small') {
			border-inline-end: 1px solid var(--border-weak);
			border-start-end-radius: var(--border-radius-lg);
			overflow: hidden;
		}
	}
}

.main-area--with-toolbar {
	@extend .main-area;

	border-radius: 0;
}

// only for Safari mobile shitty way to handle vh unit
$height-for-tablet: 5em !default;
$height-for-mobile: 8em !default;

.main-area--padding-fix {
	padding-block-end: $height-for-tablet;
}

.main-area-content--padding-fix::after {
	content: '';
	display: flex;
	inline-size: 100%;
	block-size: $height-for-tablet;
}

@include media('<=small') {
	.main-area--padding-fix {
		padding-block-end: $height-for-mobile;

		// thanks Apple for the fixed toolbar at the bottom
	}

	.main-area-content--padding-fix::after {
		block-size: $height-for-mobile;
	}
}

.main-full {
	block-size: 100%;
	overflow: auto;
	background-color: var(--background-norm);
}

.main-area--no-header {
	@extend .main-area;

	// height: 100vh; // create a crazy bug on Safari on VPN
	max-block-size: 100%;
}

.main-area--with-toolbar--no-header {
	@extend .main-area--with-toolbar;
}

.main-area-content {
	background: var(--background-norm);
}

.main-area--row-mode .items-column-list {
	inline-size: 100%;
	min-inline-size: initial;
	max-inline-size: initial;
}

@include responsive-classes(
	(
		static: (
			position: static,
		),

		relative: (
			position: relative,
		),

		absolute: (
			position: absolute,
			z-index: 1,
		),

		fixed: (
			position: fixed,
		),
	)
);

.absolute-center {
	position: absolute;
	inset-block-start: 50%;
	inset-inline-start: 50%;
	transform: translate(-50%, -50%);

	[dir='rtl'] & {
		transform: translate(50%, -50%);
	}
}

.absolute-center-x {
	inset-inline-start: 50%;
	transform: translate(-50%, 0%);

	[dir='rtl'] & {
		transform: translate(50%, 0%);
	}
}

.absolute-center-y {
	inset-block-start: 50%;
	transform: translateY(-50%);
}

.absolute-cover {
	position: absolute;
	inset: 0;
}

.sticky {
	&-top,
	&-bottom {
		position: sticky;
		z-index: 1;
	}

	&-top {
		inset-block-start: 0;
	}

	&-bottom {
		inset-block-end: 0;
	}
}

.upper-layer {
	z-index: $layer-upper;
}

/*
 * Placements
 */
.top,
.top-0 {
	inset-block-start: 0;
}

.right,
.right-0 {
	inset-inline-end: 0;
}

.bottom,
.bottom-0 {
	inset-block-end: 0;
}

.left,
.left-0 {
	inset-inline-start: 0;
}

.inset,
.inset-0 {
	inset: 0;
}

/*
 * set up to use inline style with custom props
 * to avoid having logical props in JS, postCSS can't process them
 * Specificity issue with composer and others -_-v
*/
.top-custom {
	&#{&} {
		inset-block-start: var(--top-custom);
	}
}

.right-custom {
	&#{&} {
		inset-inline-end: var(--right-custom);
	}
}

.bottom-custom {
	&#{&} {
		inset-block-end: var(--bottom-custom);
	}
}

.left-custom {
	&#{&} {
		inset-inline-start: var(--left-custom);
	}
}

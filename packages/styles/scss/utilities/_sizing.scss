@use 'sass:math';
@use 'sass:map';

@function pixel-to-rem($value) {
	@return if(type-of($value) == 'number' and unitless($value), rem($value), $value);
}

$dummy-map: ();

/// These sizings were defined in collaboration with the Design team.
/// Please contact the UXE team if you need any additional one.
/// If you can't find what you need, please consider using custom sizing utilities:
/// https://design-system.protontech.ch/?path=/docs/css-utilities-sizing--fractions#custom

@each $direction, $property in (w: inline, h: block) {
	@each $boundary in (min, '', max) {
		// Common property name
		$propname: dash-join($boundary, $property, 'size');

		// Framework
		@each $sizingname, $size in ('0': 0, 'px': '1px', '2': 8, '4': 16, 'full': 100%, 'auto': 'auto', 'none': 'none') {
			@if not(($sizingname == 'auto' and $boundary != '') or ($sizingname == 'none' and $boundary == '')) {
				$classname: dash-join($boundary, $direction, $sizingname);
				$value: pixel-to-rem($size);
				$dummy-map: map.merge($dummy-map, (#{$classname}: (#{$propname}: #{$value})));
			}
		}

		// Fractions
		@if $direction == 'w' {
			// Do not add any new value here without asking UXE team!
			@each $i in (2, 3, 4, 5, 6, 10) {
				@for $j from 1 through $i - 1 {
					$classname: dash-join($boundary, $direction, $j + '\\\/' + $i);
					$value: math.div($j, $i) * 100%;
					$dummy-map: map.merge($dummy-map, (#{$classname}: (#{$propname}: #{$value})));
				}
			}
		}

		// Customs
		$classname: dash-join($boundary, $direction, 'custom');
		$value: var(--#{'[BPN]' + $classname});
		$dummy-map: map.merge($dummy-map, (#{$classname}: (#{$propname}: #{$value})));
	}
}

// We need to serialize the classes to avoid any cascade ordering issues
@include responsive-classes($dummy-map);

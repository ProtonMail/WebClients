@use 'sass:math';
@use 'sass:map';

@function pixel-to-rem($value) {
	@return if(type-of($value) == 'number' and unitless($value), rem($value), $value);
}

$sizings: (
	'0': 0,
	'px': '1px',
	'2': 8,
	'4': 16,
	'12': 48,
	'full': 100%,
	'auto': 'auto',
);
$directions: (
	w: inline,
	h: block,
);
$boudaries: (min, '', max);
$dummy-map: ();

@each $direction, $property in $directions {
	@each $boundary in $boudaries {
		$propname: dash-join($boundary, $property, 'size');

		@each $sizingname, $size in $sizings {
			@if $sizingname != 'auto' or $sizingname == 'auto' and $boundary == '' {
				$classname: dash-join($boundary, $direction, $sizingname);
				$value: pixel-to-rem($size);
				$dummy-map: map.merge($dummy-map, (#{$classname}: (#{$propname}: #{$value})));
			}
		}

		$classname: dash-join($boundary, $direction, 'custom');
		$value: var(--#{'[BPN]' + $classname});
		$dummy-map: map.merge($dummy-map, (#{$classname}: (#{$propname}: #{$value})));
	}
}

@for $i from 2 through 6 {
	@for $j from 1 through $i - 1 {
		$dummy-map: map.merge(
			$dummy-map,
			(
				w-#{$j}\/#{$i}:
					(
						inline-size: #{math.div($j, $i) * 100%},
					)
			)
		);
	}
}

// We need to serialize the classes to avoid any cascade ordering issues
@include responsive-classes($dummy-map);

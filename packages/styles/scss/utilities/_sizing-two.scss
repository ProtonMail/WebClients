@use 'sass:math';

@function pixel-to-rem($value) {
	@return if(type-of($value) == 'number' and unitless($value), rem($value), $value);
}

$sizings: (
	'0': 0,
	'px': '1px',
	'2': 8,
	'4': 16,
	'full': 100%,
	'auto': 'auto',
);
$directions: (
	w: inline,
	h: block,
);
$boudaries: (min, '', max);
$queries: (
	default: 'all',
	sm: '>xsmall',
	md: '>small',
	lg: '>medium',
	xl: '>large',
);

@each $breakpointname, $query in $queries {
	@include media($query) {
		@each $direction, $property in $directions {
			@each $boundary in $boudaries {
				$propname: dash-join($boundary, $property, 'size');
				@each $sizingname, $size in $sizings {
					@if $sizingname != 'auto' or $sizingname == 'auto' and $boundary == '' {
						$classname: #{if($breakpointname == 'default', '', $breakpointname + '\\\:')}#{dash-join(
								$boundary,
								$direction,
								$sizingname
							)};

						.#{$classname} {
							#{$propname}: #{pixel-to-rem($size)};
						}
					}
				}

				$classname: #{if($breakpointname == 'default', '', $breakpointname + '\\\:')}#{dash-join(
						$boundary,
						$direction,
						'custom'
					)};
				$value: #{if($breakpointname == 'default', '', $breakpointname + '-')}#{dash-join(
						$boundary,
						$direction,
						'custom'
					)};

				.#{$classname} {
					&#{&} {
						// Specificity fail ðŸ˜’
						#{$propname}: var(--#{$value});
					}
				}
			}
		}
	}
}

@for $i from 2 through 6 {
	@for $j from 1 through $i - 1 {
		@include responsive-classes(w-#{$j}\/#{$i}) {
			inline-size: #{math.div($j, $i) * 100%};
		}
	}
}

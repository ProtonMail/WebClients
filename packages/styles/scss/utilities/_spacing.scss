@use 'sass:math';

// when updating margin sizes, please update them in Storybook accordingly
// applications/storybook/src/stories/cssUtilities/Margin.stories.tsx

@function pixel-to-rem($value) {
	@return if(type-of($value) == 'number' and unitless($value), rem($value), $value);
}

$spacings: (
	'0': 0,
	'0\\\.5': 2,
	'1': 4,
	'2': 8,
	'3': 12,
	'4': 16,
	'5': 20,
	'6': 24,
	'7': 28,
	'8': 32,
	'10': 40,
	'11': 44,
	'12': 48,
	'14': 56,
	'auto': 'auto',
);
$queries: (
	default: 'all',
	sm: '>xsmall',
	md: '>small',
	lg: '>medium',
	xl: '>large',
);

// generate css custom props
:root {
	@each $spacingname, $size in $spacings {
		$spacingname: str-replace($spacingname, '\\\.', '-');

		--space-#{$spacingname}: #{pixel-to-rem($size)};
	}
}

// generate `margin` and `padding` classes
$properties: (
	m: 'margin',
	p: 'padding',
);
$placements: (
	default: '',
	y: 'block',
	t: 'block-start',
	b: 'block-end',
	x: 'inline',
	l: 'inline-start',
	r: 'inline-end',
);

@each $breakpointname, $query in $queries {
	@include media($query) {
		@each $propertyname, $property in $properties {
			@each $placementname, $placement in $placements {
				$cssproperty: if($placementname == 'default', $property, dash-join($property, $placement));

				@each $spacingname, $size in $spacings {
					@if not($property == 'padding' and $spacingname == 'auto') {
						$classname: #{if($breakpointname == 'default', '', $breakpointname + '\\\:')}#{$propertyname}#{if(
								$placementname == 'default',
								'',
								$placementname
							)}-#{$spacingname};

						.#{$classname} {
							#{$cssproperty}: #{pixel-to-rem($size)};
						}
					}
				}

				$classname: #{if($breakpointname == 'default', '', $breakpointname + '\\\:')}#{$propertyname}#{if(
						$placementname == 'default',
						'',
						$placementname
					)}-custom;
				$value: #{if($breakpointname == 'default', '', $breakpointname + '-')}#{$propertyname}#{if(
						$placementname == 'default',
						'',
						$placementname
					)}-custom;

				.#{$classname} {
					#{$cssproperty}: var(--#{$value});
				}
			}
		}
	}
}

// generate `gap` classes
$properties: (
	gap: 'gap',
);
$placements: (
	default: '',
	x: 'column',
	y: 'row',
);

@each $breakpointname, $query in $queries {
	@include media($query) {
		@each $propertyname, $property in $properties {
			@each $placementname, $placement in $placements {
				@each $spacingname, $size in $spacings {
					@if not($spacingname == 'auto') {
						$classname: #{if($breakpointname == 'default', '', $breakpointname + '\\\:')}#{$propertyname}#{if(
								$placementname == 'default',
								'',
								'-' + $placementname
							)}-#{$spacingname};
						$cssproperty: if($placementname == 'default', $property, dash-join($placement, $property));

						.#{$classname} {
							#{$cssproperty}: #{pixel-to-rem($size)};
						}
					}
				}
			}
		}
	}
}

@use 'sass:map';

// when updating margin sizes, please update them in Storybook accordingly
// applications/storybook/src/stories/cssUtilities/Margin.stories.tsx

@function pixel-to-rem($value) {
	@return if(type-of($value) == 'number' and unitless($value), rem($value), $value);
}

$spacings: (
	'0': 0,
	'0\\\.5': 2,
	'1': 4,
	'2': 8,
	'3': 12,
	'4': 16,
	'5': 20,
	'6': 24,
	'7': 28,
	'8': 32,
	'10': 40,
	'11': 44,
	'12': 48,
	'14': 56,
	'16': 64,
	'auto': 'auto',
);

// generate css custom props
:root {
	@each $spacingname, $size in $spacings {
		$spacingname: str-replace($spacingname, '\\\.', '-');

		--space-#{$spacingname}: #{pixel-to-rem($size)};
	}
}

$dummy-map: ();

// generate `margin` and `padding` classes
$properties: (
	m: 'margin',
	p: 'padding',
);
$placements: (
	default: '',
	y: 'block',
	t: 'block-start',
	b: 'block-end',
	x: 'inline',
	l: 'inline-start',
	r: 'inline-end',
);

@each $propertyname, $property in $properties {
	@each $placementname, $placement in $placements {
		$cssproperty: if($placementname == 'default', $property, dash-join($property, $placement));

		@each $spacingname, $size in $spacings {
			@if not($property == 'padding' and $spacingname == 'auto') {
				$classname: dash-join($propertyname + if($placementname == 'default', '', $placementname), $spacingname);
				$value: pixel-to-rem($size);
				$dummy-map: map.merge(
					$dummy-map,
					(
						$classname: (
							#{$cssproperty}: #{$value},
						),
					)
				);
			}
		}

		$classname: dash-join($propertyname + if($placementname == 'default', '', $placementname), 'custom');
		$value: var(--#{'[BPN]' + $classname});
		$dummy-map: map.merge(
			$dummy-map,
			(
				$classname: (
					#{$cssproperty}: #{$value},
				),
			)
		);
	}
}

// generate `gap` classes
$placements: (
	default: '',
	x: 'column',
	y: 'row',
);

@each $placementname, $placement in $placements {
	$cssproperty: if($placementname == 'default', 'gap', dash-join($placement, 'gap'));

	@each $spacingname, $size in $spacings {
		@if not($spacingname == 'auto') {
			$classname: dash-join('gap', if($placementname == 'default', '', $placementname), $spacingname);
			$value: pixel-to-rem($size);
			$dummy-map: map.merge(
				$dummy-map,
				(
					$classname: (
						#{$cssproperty}: #{$value},
					),
				)
			);
		}
	}

	$classname: dash-join('gap', if($placementname == 'default', '', $placementname), 'custom');
	$value: var(--#{'[BPN]' + $classname});
	$dummy-map: map.merge(
		$dummy-map,
		(
			$classname: (
				#{$cssproperty}: #{$value},
			),
		)
	);
}

// We serialize here to factorize media queries
@include responsive-classes($dummy-map);

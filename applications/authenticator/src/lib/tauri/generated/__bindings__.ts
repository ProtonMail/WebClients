// @ts-nocheck
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async logIn(windowTitle: string, ssoUrl: string) : Promise<Result<null, TauriError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("log_in", { windowTitle, ssoUrl }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async canCheckPresence() : Promise<Result<boolean, BiometricsError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("can_check_presence") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async checkPresence(reason: string) : Promise<Result<null, BiometricsError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("check_presence", { reason }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Generates a local key and attempts to save it to the OS's keyring.
 * If the key already exists, resolves it.
 */
async generateStorageKey(keyId: string) : Promise<Result<string, KeyringError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("generate_storage_key", { keyId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Retrieves a local key by `key_id`. Consumers should parse the
 * `KeyringError` enum in case of errors to decide how to proceed.
 */
async getStorageKey(keyId: string) : Promise<Result<string, KeyringError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_storage_key", { keyId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async removeStorageKey(keyId: string) : Promise<Result<null, KeyringError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("remove_storage_key", { keyId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getTheme() : Promise<string | null> {
    return await TAURI_INVOKE("get_theme");
},
async setTheme(theme: string) : Promise<Result<null, TauriError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("set_theme", { theme }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type BiometricsError = { code: number }
/**
 * Mirrors the core `keyring::Error` enum with stripped down error messages.
 * This allows handling errors gracefully in JS via specta bindings.
 */
export type KeyringError = { type: "PlatformFailure"; message: string } | { type: "NoStorageAccess"; message: string } | { type: "NoEntry"; message: string } | { type: "BadEncoding"; message: string } | { type: "TooLong"; message: string } | { type: "Invalid"; message: string } | { type: "Ambiguous"; message: string } | { type: "Unknown"; message: string }
export type TauriError = { message: string }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}

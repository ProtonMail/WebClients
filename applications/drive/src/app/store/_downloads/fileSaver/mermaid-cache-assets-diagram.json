[
    {
        "state": {
            "code": "sequenceDiagram\n    participant FE as Frontend\n    participant SW as Service Worker\n    participant Cache as Cache API (webpack-cache-v1)\n    participant Server as Server\n\n    FE->>FE: initDownloadSW()\n    FE->>FE: Check isUnsupported()\n    \n    alt Browser Unsupported\n        FE-->>FE: Throw Error\n    else Browser Supported\n        FE->>SW: Register Service Worker\n        \n        alt SW Active\n            FE->>SW: postMessage(cache_assets)\n        else SW Installing\n            FE->>SW: Add statechange listener\n            SW-->>SW: State changes to 'activated'\n            FE->>SW: postMessage(cache_assets)\n        end\n\n        Note over SW: fetchAndCacheAssets starts\n        \n        SW->>Server: fetch('/assets/offline.json')\n        Server-->>SW: Return manifest\n        \n        SW->>SW: Process manifest paths\n        \n        SW->>Cache: Open cache ('webpack-cache-v1')\n        \n        par Cache cleanup\n            SW->>Cache: Get existing cache keys\n            SW->>SW: Compare with new manifest\n            SW->>Cache: Delete outdated files\n        and Cache update\n            SW->>SW: Identify new files to cache\n            loop For each new file\n                SW->>Server: fetch(file)\n                Server-->>SW: Return file content\n                SW->>Cache: Cache file\n            end\n        end\n        \n        FE->>FE: serviceWorkerKeepAlive()\n    end",
            "mermaid": "{\n  \"theme\": \"dark\"\n}",
            "autoSync": true,
            "rough": false,
            "updateDiagram": true,
            "panZoom": false,
            "editorMode": "code"
        },
        "time": 1731509967458,
        "type": "auto",
        "id": "e37d4216-b0a7-499e-9ab1-215e94cb0b70",
        "name": "numerous-fish"
    },
    {
        "state": {
            "code": "sequenceDiagram\n    participant FE as Frontend\n    participant SW as Service Worker\n    participant Cache as Cache API (webpack-cache-v1)\n    participant Server as Server\n\n    FE->>FE: initDownloadSW()\n    FE->>FE: Check isUnsupported()\n    \n    alt Browser Unsupported\n        FE-->>FE: Throw Error\n    else Browser Supported\n        FE->>SW: Register Service Worker\n        \n        alt SW Active\n            FE->>SW: postMessage(cache_assets)\n        else SW Installing\n            FE->>SW: Add statechange listener\n            SW-->>SW: State changes to 'activated'\n            FE->>SW: postMessage(cache_assets)\n        end\n\n        Note over SW: fetchAndCacheAssets starts\n        \n        SW->>Server: fetch('/assets/offline.json')\n        Server-->>SW: Return manifest\n        \n        SW->>SW: Process manifest paths\n        \n        SW->>Cache: Open cache ('webpack-cache-v1')\n        \n        par Cache cleanup\n            SW->>Cache: Get existing cache keys\n            SW->>SW: Compare with new manifest\n            SW->>Cache: Delete outdated files\n        and Cache update\n            SW->>SW: Identify new files to cache\n            loop For each new file\n                SW->>Server: fetch(file)\n                Server-->>SW: Return file content\n                SW->>Cache: Cache file\n            end\n        end\n        \n        FE->>FE: serviceWorkerKeepAlive()\n    end",
            "mermaid": "{\n  \"theme\": \"dark\"\n}",
            "autoSync": true,
            "rough": false,
            "updateDiagram": false,
            "panZoom": false,
            "editorMode": "code"
        },
        "time": 1731508254342,
        "type": "auto",
        "id": "17fb1920-99ca-4f6d-beb7-2d7f363a79b9",
        "name": "plain-intern"
    },
    {
        "state": {
            "code": "sequenceDiagram\n    participant FE as Frontend\n    participant SW as Service Worker\n    participant Cache as Cache API\n    participant Server as Server\n\n    FE->>FE: initDownloadSW()\n    FE->>FE: Check isUnsupported()\n    \n    alt Browser Unsupported\n        FE-->>FE: Throw Error\n    else Browser Supported\n        FE->>SW: Register Service Worker\n        \n        alt SW Active\n            FE->>SW: postMessage(cache_assets)\n        else SW Installing\n            FE->>SW: Add statechange listener\n            SW-->>SW: State changes to 'activated'\n            FE->>SW: postMessage(cache_assets)\n        end\n\n        Note over SW: fetchAndCacheAssets starts\n        \n        SW->>Server: fetch('/assets/offline.json')\n        Server-->>SW: Return manifest\n        \n        SW->>SW: Process manifest paths\n        \n        SW->>Cache: Open cache (CACHE_NAME)\n        \n        par Cache cleanup\n            SW->>Cache: Get existing cache keys\n            SW->>SW: Compare with new manifest\n            SW->>Cache: Delete outdated files\n        and Cache update\n            SW->>SW: Identify new files to cache\n            SW->>Cache: cache.addAll(newFiles)\n        end\n        \n        FE->>FE: serviceWorkerKeepAlive()\n    end",
            "mermaid": "{\n  \"theme\": \"dark\"\n}",
            "autoSync": true,
            "rough": false,
            "updateDiagram": false,
            "panZoom": false,
            "editorMode": "config"
        },
        "time": 1731508134236,
        "type": "auto",
        "id": "6ce5b8a7-54b0-4e53-b310-524ba3fc741b",
        "name": "putrid-midnight"
    },
    {
        "state": {
            "code": "sequenceDiagram\n    participant FE as Frontend\n    participant SW as Service Worker\n    participant Cache as Cache API\n    participant Server as Server\n\n    FE->>FE: initDownloadSW()\n    FE->>FE: Check isUnsupported()\n    \n    alt Browser Unsupported\n        FE-->>FE: Throw Error\n    else Browser Supported\n        FE->>SW: Register Service Worker\n        \n        alt SW Active\n            FE->>SW: postMessage(cache_assets)\n        else SW Installing\n            FE->>SW: Add statechange listener\n            SW-->>SW: State changes to 'activated'\n            FE->>SW: postMessage(cache_assets)\n        end\n\n        Note over SW: fetchAndCacheAssets starts\n        \n        SW->>Server: fetch('/assets/offline.json')\n        Server-->>SW: Return manifest\n        \n        SW->>SW: Process manifest paths\n        \n        SW->>Cache: Open cache (CACHE_NAME)\n        \n        par Cache cleanup\n            SW->>Cache: Get existing cache keys\n            SW->>SW: Compare with new manifest\n            SW->>Cache: Delete outdated files\n        and Cache update\n            SW->>SW: Identify new files to cache\n            SW->>Cache: cache.addAll(newFiles)\n        end\n        \n        FE->>FE: serviceWorkerKeepAlive()\n    end",
            "mermaid": "{\n  \"theme\": \"dark\"\n}",
            "autoSync": true,
            "rough": false,
            "updateDiagram": false,
            "panZoom": false,
            "editorMode": "config"
        },
        "time": 1731508095543,
        "type": "manual",
        "id": "029bd5b1-0e05-40fd-a264-3def308b80be",
        "name": "inexpensive-microphone"
    },
    {
        "state": {
            "code": "%%{init: {'theme': 'base', 'themeVariables': { 'primaryColor': '#2a4c70', 'primaryTextColor': '#fff', 'primaryBorderColor': '#2a4c70', 'lineColor': '#2a4c70', 'secondaryColor': '#4a6c90', 'tertiaryColor': '#6a8cb0'}}}%%\ngraph TD\n    A[Harvest/Scrape Reddit Posts] -->|JSON files| B(Process Posts)\n    B -->|For each post| C{Sentiment Analysis}\n    B -->|For each post| D{Classification}\n    B -->|For each comment/reply| E{Sentiment Analysis}\n    B -->|For each comment/reply| F{Classification}\n    \n    C -->|Call| G[OLLAMA API]\n    D -->|Call| G\n    E -->|Call| G\n    F -->|Call| G\n    \n    G -->|Response| H[Transform Data]\n    \n    H -->|Processed Data| I[Generate JSON]\n    \n    I -->|analysis_results.json| J[HTML Visualization]\n    \n    subgraph \"Data Processing (Go)\"\n        B\n        C\n        D\n        E\n        F\n        H\n        I\n    end\n    \n    subgraph \"API\"\n        G\n    end\n    \n    subgraph \"Visualization (HTML/JS)\"\n        J -->|Display| K[Sentiment Charts]\n        J -->|Display| L[Classification Charts]\n        J -->|Display| M[Network Graph]\n        J -->|Display| N[Tag Cloud]\n        J -->|Display| O[Percentage Tables]\n    end\n\n    classDef process fill:#4a6c90,stroke:#fff,stroke-width:2px,color:#fff;\n    classDef api fill:#6a8cb0,stroke:#fff,stroke-width:2px,color:#fff;\n    classDef visualization fill:#2a4c70,stroke:#fff,stroke-width:2px,color:#fff;\n    \n    class A,B,C,D,E,F,H,I process;\n    class G api;\n    class J,K,L,M,N,O visualization;",
            "mermaid": "{\n  \"theme\": \"dark\"\n}",
            "autoSync": true,
            "rough": false,
            "updateDiagram": true,
            "panZoom": false
        },
        "time": 1729490296650,
        "type": "auto",
        "id": "984d488d-995c-4cf4-9167-e56f6012c54f",
        "name": "whining-australia"
    },
    {
        "state": {
            "code": "%%{init: {'theme': 'base', 'themeVariables': { 'primaryColor': '#2a4c70', 'primaryTextColor': '#fff', 'primaryBorderColor': '#2a4c70', 'lineColor': '#2a4c70', 'secondaryColor': '#4a6c90', 'tertiaryColor': '#6a8cb0'}}}%%\ngraph TD\n    A[Harvest/Scrape Reddit Posts] -->|JSON files| B(Process Posts)\n    B -->|For each post| C{Sentiment Analysis}\n    B -->|For each post| D{Classification}\n    B -->|For each comment/reply| E{Sentiment Analysis}\n    B -->|For each comment/reply| F{Classification}\n    \n    C -->|Call| G[OLLAMA API]\n    D -->|Call| G\n    E -->|Call| G\n    F -->|Call| G\n    \n    G -->|Response| H[Transform Data]\n    \n    H -->|Processed Data| I[Generate JSON]\n    \n    I -->|analysis_results.json| J[HTML Visualization]\n    \n    subgraph \"Data Processing (Go)\"\n        B\n        C\n        D\n        E\n        F\n        H\n        I\n    end\n    \n    subgraph \"API\"\n        G\n    end\n    \n    subgraph \"Visualization (HTML/JS)\"\n        J -->|Display| K[Sentiment Charts]\n        J -->|Display| L[Classification Charts]\n        J -->|Display| M[Network Graph]\n        J -->|Display| N[Tag Cloud]\n        J -->|Display| O[Percentage Tables]\n    end\n\n    classDef process fill:#4a6c90,stroke:#fff,stroke-width:2px,color:#fff;\n    classDef api fill:#6a8cb0,stroke:#fff,stroke-width:2px,color:#fff;\n    classDef visualization fill:#2a4c70,stroke:#fff,stroke-width:2px,color:#fff;\n    \n    class A,B,C,D,E,F,H,I process;\n    class G api;\n    class J,K,L,M,N,O visualization;",
            "mermaid": "{\n  \"theme\": \"dark\"\n}",
            "autoSync": true,
            "rough": false,
            "updateDiagram": false,
            "panZoom": false
        },
        "time": 1728546976892,
        "type": "auto",
        "id": "b24d19e0-1cee-4b60-ad06-82162b28c0ce",
        "name": "freezing-agency"
    },
    {
        "state": {
            "code": "%%{init: {'theme': 'base', 'themeVariables': { 'primaryColor': '#2a4c70', 'primaryTextColor': '#fff', 'primaryBorderColor': '#2a4c70', 'lineColor': '#2a4c70', 'secondaryColor': '#4a6c90', 'tertiaryColor': '#6a8cb0'}}}%%\ngraph TD\n    A[Harvest/Scrape Reddit Posts] -->|JSON files| B(Process Posts)\n    B -->|For each post| C{Sentiment Analysis}\n    B -->|For each post| D{Classification}\n    B -->|For each comment/reply| E{Sentiment Analysis}\n    B -->|For each comment/reply| F{Classification}\n    \n    C -->|Call| G[OLLAMA API]\n    D -->|Call| G\n    E -->|Call| G\n    F -->|Call| G\n    \n    G -->|Response| H[Transform Data]\n    \n    H -->|Processed Data| I[Generate JSON]\n    \n    I -->|analysis_results.json| J[HTML Visualization]\n    \n    subgraph \"Data Processing (Go)\"\n        B\n        C\n        D\n        E\n        F\n        H\n        I\n    end\n    \n    subgraph \"API\"\n        G\n    end\n    \n    subgraph \"Visualization (HTML/JS)\"\n        J -->|Display| K[Sentiment Charts]\n        J -->|Display| L[Classification Charts]\n        J -->|Display| M[Network Graph]\n        J -->|Display| N[Tag Cloud]\n        J -->|Display| O[Percentage Tables]\n    end\n\n    classDef process fill:#4a6c90,stroke:#fff,stroke-width:2px,color:#fff;\n    classDef api fill:#6a8cb0,stroke:#fff,stroke-width:2px,color:#fff;\n    classDef visualization fill:#2a4c70,stroke:#fff,stroke-width:2px,color:#fff;\n    \n    class A,B,C,D,E,F,H,I process;\n    class G api;\n    class J,K,L,M,N,O visualization;",
            "mermaid": "{\n  \"theme\": \"dark\"\n}",
            "autoSync": true,
            "rough": false,
            "updateDiagram": false,
            "panZoom": false
        },
        "time": 1728546942266,
        "type": "manual",
        "id": "6298252b-d645-4ccb-895b-a4cdb0d15510",
        "name": "modern-flag"
    },
    {
        "state": {
            "code": "graph TD\n    A[Harvest/Scrape Reddit Posts] -->|JSON files| B(Process Posts)\n    B -->|For each post| C{Sentiment Analysis}\n    B -->|For each post| D{Classification}\n    B -->|For each comment/reply| E{Sentiment Analysis}\n    B -->|For each comment/reply| F{Classification}\n    \n    C -->|Call| G[OLLAMA API]\n    D -->|Call| G\n    E -->|Call| G\n    F -->|Call| G\n    \n    G -->|Response| H[Transform Data]\n    \n    H -->|Processed Data| I[Generate JSON]\n    \n    I -->|analysis_results.json| J[HTML Visualization]\n    \n    subgraph \"Data Processing (Go)\"\n        B\n        C\n        D\n        E\n        F\n        H\n        I\n    end\n    \n    subgraph \"API\"\n        G\n    end\n    \n    subgraph \"Visualization (HTML/JS)\"\n        J -->|Display| K[Sentiment Charts]\n        J -->|Display| L[Classification Charts]\n        J -->|Display| N[Tag Cloud]\n        J -->|Display| O[Percentage Tables]\n    end\n\n    classDef process fill:#f9f,stroke:#333,stroke-width:2px;\n    classDef api fill:#bbf,stroke:#333,stroke-width:2px;\n    classDef visualization fill:#bfb,stroke:#333,stroke-width:2px;\n    \n    class A,B,C,D,E,F,H,I process;\n    class G api;\n    class J,K,L,M,N,O visualization;",
            "mermaid": "{\n  \"theme\": \"dark\"\n}",
            "autoSync": true,
            "rough": false,
            "updateDiagram": false,
            "panZoom": false
        },
        "time": 1728546916849,
        "type": "auto",
        "id": "0bdb54e2-a680-4806-9ae4-6ca90e4b1f5f",
        "name": "ancient-baby"
    },
    {
        "state": {
            "code": "flowchart TD\n    A[Christmas] -->|Get money| B(Go shopping)\n    B --> C{Let me think}\n    C -->|One| D[Laptop]\n    C -->|Two| E[iPhone]\n    C -->|Three| F[fa:fa-car Car]\n  ",
            "mermaid": "{\n  \"theme\": \"dark\"\n}",
            "autoSync": true,
            "rough": false,
            "updateDiagram": true
        },
        "time": 1725008559778,
        "type": "auto",
        "id": "974865db-c871-4710-9289-3ce188148809",
        "name": "dirty-artist"
    }
]

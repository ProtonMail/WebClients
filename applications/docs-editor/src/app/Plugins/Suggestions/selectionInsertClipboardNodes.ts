import type { LexicalNode } from 'lexical'
import { $createRangeSelection, $getSelection, $isRangeSelection } from 'lexical'
import { GenerateUUID } from '@proton/docs-core'
import { $createSuggestionNode } from './ProtonNode'
import { $wrapSelectionInSuggestionNode, $isNodeNotInline } from './Utils'

/**
 * This command is triggered by $insertDataTransferForRichText to allow
 * overriding the insertion behavior of nodes generated by it from a
 * DataTransfer, usually from a paste-related event.
 */
export function $selectionInsertClipboardNodes(
  nodes: LexicalNode[],
  onSuggestionCreation: (id: string) => void,
): boolean {
  const selection = $getSelection()
  if (!$isRangeSelection(selection)) {
    return true
  }

  const suggestionID = GenerateUUID()

  if (!selection.isCollapsed()) {
    $wrapSelectionInSuggestionNode(selection, selection.isBackward(), suggestionID, 'delete')
    onSuggestionCreation(suggestionID)
  }

  const latestSelection = $getSelection()
  if (!$isRangeSelection(latestSelection) || !latestSelection.isCollapsed()) {
    return true
  }

  const allNodesAreInline = !nodes.some($isNodeNotInline)
  if (allNodesAreInline) {
    const suggestionNode = $createSuggestionNode(suggestionID, 'insert')
    suggestionNode.append(...nodes)
    latestSelection.insertNodes([suggestionNode])
    onSuggestionCreation(suggestionID)
    return true
  }

  const selectionBeforeInserting = latestSelection
  const anchorBeforeInserting = {
    key: selectionBeforeInserting.anchor.key,
    offset: selectionBeforeInserting.anchor.offset,
    type: selectionBeforeInserting.anchor.type,
  }

  selectionBeforeInserting.insertNodes(nodes)

  const selectionAfterInserting = $getSelection()
  if (!$isRangeSelection(selectionAfterInserting) || !selectionAfterInserting.isCollapsed()) {
    throw new Error('Cannot ensure inserted nodes are marked as suggestion')
  }

  const anchorAfterInserting = selectionAfterInserting.anchor

  const selectionToMark = $createRangeSelection()
  selectionToMark.anchor.set(anchorBeforeInserting.key, anchorBeforeInserting.offset, anchorBeforeInserting.type)
  selectionToMark.focus.set(anchorAfterInserting.key, anchorAfterInserting.offset, anchorAfterInserting.type)

  $wrapSelectionInSuggestionNode(selectionToMark, selectionToMark.isBackward(), suggestionID, 'insert')

  onSuggestionCreation(suggestionID)

  return true
}

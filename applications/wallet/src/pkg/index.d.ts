/* tslint:disable */
/* eslint-disable */
/**
* @returns {string}
*/
export function library_version(): string;
/**
*/
export enum WasmPaymentLinkKind {
  BitcoinAddress = 0,
  BitcoinURI = 1,
  LightningURI = 2,
  UnifiedURI = 3,
}
/**
*/
export enum WasmWordCount {
  Words12 = 0,
  Words15 = 1,
  Words18 = 2,
  Words21 = 3,
  Words24 = 4,
}
/**
*/
export enum WasmChangeSpendPolicy {
  ChangeAllowed = 0,
  OnlyChange = 1,
  ChangeForbidden = 2,
}
/**
*/
export enum WasmNetwork {
/**
* Mainnet Bitcoin.
*/
  Bitcoin = 0,
/**
* Bitcoin's testnet network.
*/
  Testnet = 1,
/**
* Bitcoin's signet network.
*/
  Signet = 2,
/**
* Bitcoin's regtest network.
*/
  Regtest = 3,
}
/**
*/
export enum WasmKeychainKind {
/**
* External keychain, used for deriving recipient addresses.
*/
  External = 0,
/**
* Internal keychain, used for deriving change addresses.
*/
  Internal = 1,
}
/**
*/
export enum WasmCoinSelection {
  BranchAndBound = 0,
  LargestFirst = 1,
  OldestFirst = 2,
  Manual = 3,
}
/**
*/
export enum WasmError {
  InvalidSecretKey = 0,
  InvalidNetwork = 1,
  InvalidDescriptor = 2,
  InvalidDerivationPath = 3,
  InvalidAccountIndex = 4,
  DerivationError = 5,
  SyncError = 6,
  OutpointParsingError = 7,
  InvalidData = 8,
  InvalidAddress = 9,
  InvalidTxId = 10,
  CannotComputeTxFees = 11,
  InvalidMnemonic = 12,
  InvalidSeed = 13,
  CannotGetFeeEstimation = 14,
  CannotSignPsbt = 15,
  NoWindowContext = 16,
  CannotGetLocalStorage = 17,
  CannotSerializePersistedData = 18,
  CannotPersistData = 19,
  CannotFindPersistedData = 20,
  CannotParsePersistedData = 21,
  Generic = 22,
  NoRecipients = 23,
  NoUtxosSelected = 24,
  OutputBelowDustLimit = 25,
  InsufficientFunds = 26,
  BnBTotalTriesExceeded = 27,
  BnBNoExactMatch = 28,
  UnknownUtxo = 29,
  TransactionNotFound = 30,
  TransactionConfirmed = 31,
  IrreplaceableTransaction = 32,
  FeeRateTooLow = 33,
  FeeTooLow = 34,
  FeeRateUnavailable = 35,
  MissingKeyOrigin = 36,
  Key = 37,
  ChecksumMismatch = 38,
  SpendingPolicyRequired = 39,
  InvalidPolicyPathError = 40,
  Signer = 41,
  InvalidOutpoint = 42,
  Descriptor = 43,
  Miniscript = 44,
  MiniscriptPsbt = 45,
  Bip32 = 46,
  Psbt = 47,
}
/**
*/
export enum WasmLanguage {
  English = 0,
  SimplifiedChinese = 1,
  TraditionalChinese = 2,
  Czech = 3,
  French = 4,
  Italian = 5,
  Japanese = 6,
  Korean = 7,
  Spanish = 8,
}
/**
*/
export enum WasmSupportedBIPs {
  Bip44 = 0,
  Bip49 = 1,
  Bip84 = 2,
  Bip86 = 3,
}
/**
*/
export class DetailledWasmError {
  free(): void;
/**
*/
  details: any;
/**
*/
  kind: WasmError;
}
/**
*/
export class WasmAccount {
  free(): void;
/**
* @returns {boolean}
*/
  has_sync_data(): boolean;
/**
* @param {number | undefined} [index]
* @param {bigint | undefined} [amount]
* @param {string | undefined} [label]
* @param {string | undefined} [message]
* @returns {WasmPaymentLink}
*/
  get_bitcoin_uri(index?: number, amount?: bigint, label?: string, message?: string): WasmPaymentLink;
/**
* @param {WasmAddress} address
* @returns {boolean}
*/
  owns(address: WasmAddress): boolean;
/**
* @returns {WasmBalance}
*/
  get_balance(): WasmBalance;
/**
* @returns {string}
*/
  get_derivation_path(): string;
/**
* @returns {(WasmUtxo)[]}
*/
  get_utxos(): (WasmUtxo)[];
/**
* @param {WasmPagination | undefined} [pagination]
* @returns {(WasmSimpleTransaction)[]}
*/
  get_transactions(pagination?: WasmPagination): (WasmSimpleTransaction)[];
}
/**
*/
export class WasmAccountConfig {
  free(): void;
/**
* @param {WasmSupportedBIPs | undefined} [bip]
* @param {WasmNetwork | undefined} [network]
* @param {number | undefined} [account_index]
*/
  constructor(bip?: WasmSupportedBIPs, network?: WasmNetwork, account_index?: number);
/**
*/
  account_index: number;
/**
*/
  bip: WasmSupportedBIPs;
/**
*/
  network: WasmNetwork;
}
/**
*/
export class WasmAddress {
  free(): void;
/**
* @param {string} str
* @param {WasmNetwork} network
*/
  constructor(str: string, network: WasmNetwork);
/**
* @param {WasmScript} value
* @param {WasmNetwork} network
* @returns {WasmAddress}
*/
  static from_script(value: WasmScript, network: WasmNetwork): WasmAddress;
/**
* @returns {string}
*/
  to_string(): string;
/**
* @returns {WasmScript}
*/
  into_script(): WasmScript;
}
/**
*/
export class WasmAddressIndex {
  free(): void;
/**
* @returns {WasmAddressIndex}
*/
  static createNew(): WasmAddressIndex;
/**
* @returns {WasmAddressIndex}
*/
  static createLastUnused(): WasmAddressIndex;
/**
* @param {number} index
* @returns {WasmAddressIndex}
*/
  static createPeek(index: number): WasmAddressIndex;
}
/**
*/
export class WasmAddressInfo {
  free(): void;
/**
* @returns {string}
*/
  to_string(): string;
/**
*/
  readonly index: number;
}
/**
*/
export class WasmBalance {
  free(): void;
/**
* Confirmed and immediately spendable balance
*/
  confirmed: bigint;
/**
* All coinbase outputs not yet matured
*/
  immature: bigint;
/**
* Unconfirmed UTXOs generated by a wallet tx
*/
  trusted_pending: bigint;
/**
* Unconfirmed UTXOs received from an external wallet
*/
  untrusted_pending: bigint;
}
/**
*/
export class WasmChain {
  free(): void;
/**
* Generates a Mnemonic with a random entropy based on the given word count.
*/
  constructor();
/**
* @returns {Promise<Map<string, number>>}
*/
  get_fees_estimation(): Promise<Map<string, number>>;
/**
* @param {WasmAccount} account
* @returns {Promise<void>}
*/
  full_sync(account: WasmAccount): Promise<void>;
/**
* @param {WasmAccount} account
* @returns {Promise<void>}
*/
  partial_sync(account: WasmAccount): Promise<void>;
/**
* @param {WasmPartiallySignedTransaction} psbt
* @returns {Promise<string>}
*/
  broadcast_psbt(psbt: WasmPartiallySignedTransaction): Promise<string>;
}
/**
*/
export class WasmConfirmation {
  free(): void;
/**
*/
  confirmation_time?: bigint;
/**
*/
  confirmed: boolean;
/**
*/
  last_seen?: bigint;
}
/**
*/
export class WasmDerivationPath {
  free(): void;
/**
* @param {string} path
*/
  constructor(path: string);
}
/**
*/
export class WasmLockTime {
  free(): void;
/**
* @param {number} height
* @returns {WasmLockTime}
*/
  static fromHeight(height: number): WasmLockTime;
/**
* @param {number} seconds
* @returns {WasmLockTime}
*/
  static fromSeconds(seconds: number): WasmLockTime;
/**
* @returns {boolean}
*/
  is_block_height(): boolean;
/**
* @returns {boolean}
*/
  is_block_time(): boolean;
/**
* @returns {number}
*/
  to_consensus_u32(): number;
}
/**
*/
export class WasmMnemonic {
  free(): void;
/**
* Generates a Mnemonic with a random entropy based on the given word count.
* @param {WasmWordCount} word_count
*/
  constructor(word_count: WasmWordCount);
/**
* Parse a Mnemonic with the given string.
* @param {string} mnemonic
* @returns {WasmMnemonic}
*/
  static fromString(mnemonic: string): WasmMnemonic;
/**
* Returns the Mnemonic as a string.
* @returns {string}
*/
  asString(): string;
/**
* @returns {(string)[]}
*/
  toWords(): (string)[];
}
/**
* Serialised Outpoint under the form <txid>:<index>
*/
export class WasmOutPoint {
  free(): void;
/**
*/
  0: string;
}
/**
*/
export class WasmPagination {
  free(): void;
/**
* @param {number} skip
* @param {number} take
*/
  constructor(skip: number, take: number);
/**
*/
  skip: number;
/**
*/
  take: number;
}
/**
*/
export class WasmPartiallySignedTransaction {
  free(): void;
/**
* @param {WasmAccount} wasm_account
* @param {WasmNetwork} network
* @returns {WasmPartiallySignedTransaction}
*/
  sign(wasm_account: WasmAccount, network: WasmNetwork): WasmPartiallySignedTransaction;
/**
*/
  recipients: (WasmPsbtRecipient)[];
/**
*/
  total_fees: bigint;
}
/**
*/
export class WasmPaymentLink {
  free(): void;
/**
* @returns {string}
*/
  to_string(): string;
/**
* @returns {string}
*/
  to_uri(): string;
/**
* @param {string} str
* @param {WasmNetwork} network
* @returns {WasmPaymentLink}
*/
  static try_parse(str: string, network: WasmNetwork): WasmPaymentLink;
/**
* @returns {WasmPaymentLinkKind}
*/
  get_kind(): WasmPaymentLinkKind;
}
/**
*/
export class WasmPsbtRecipient {
  free(): void;
/**
*/
  0: string;
/**
*/
  1: bigint;
}
/**
*/
export class WasmRecipient {
  free(): void;
/**
*/
  0: string;
/**
*/
  1: string;
/**
*/
  2: bigint;
}
/**
*/
export class WasmScript {
  free(): void;
/**
*/
  0: Uint8Array;
}
/**
*/
export class WasmSequence {
  free(): void;
/**
*/
  0: number;
}
/**
*/
export class WasmSimpleTransaction {
  free(): void;
/**
*/
  confirmation: WasmConfirmation;
/**
*/
  fees?: bigint;
/**
*/
  txid: string;
/**
*/
  value: bigint;
}
/**
*/
export class WasmTransaction {
  free(): void;
/**
*/
  input: (WasmTxIn)[];
/**
*/
  lock_time: WasmLockTime;
/**
*/
  output: (WasmTxOut)[];
/**
*/
  version: number;
}
/**
*/
export class WasmTxBuilder {
  free(): void;
/**
*/
  constructor();
/**
* @param {WasmAccount} account
* @returns {WasmTxBuilder}
*/
  set_account(account: WasmAccount): WasmTxBuilder;
/**
* @returns {WasmTxBuilder}
*/
  add_recipient(): WasmTxBuilder;
/**
* @param {number} index
* @returns {WasmTxBuilder}
*/
  remove_recipient(index: number): WasmTxBuilder;
/**
* @param {number} index
* @param {string | undefined} [address_str]
* @param {bigint | undefined} [amount]
* @returns {WasmTxBuilder}
*/
  update_recipient(index: number, address_str?: string, amount?: bigint): WasmTxBuilder;
/**
* @returns {(WasmRecipient)[]}
*/
  get_recipients(): (WasmRecipient)[];
/**
*
*     * UTXOs
*     
* @param {WasmOutPoint} outpoint
* @returns {WasmTxBuilder}
*/
  add_utxo_to_spend(outpoint: WasmOutPoint): WasmTxBuilder;
/**
* @param {WasmOutPoint} outpoint
* @returns {WasmTxBuilder}
*/
  remove_utxo_to_spend(outpoint: WasmOutPoint): WasmTxBuilder;
/**
* @returns {WasmTxBuilder}
*/
  clear_utxos_to_spend(): WasmTxBuilder;
/**
* @returns {(WasmOutPoint)[]}
*/
  get_utxos_to_spend(): (WasmOutPoint)[];
/**
*
*     * Coin selection enforcement
*     
* @param {WasmCoinSelection} coin_selection
* @returns {WasmTxBuilder}
*/
  set_coin_selection(coin_selection: WasmCoinSelection): WasmTxBuilder;
/**
* @returns {WasmCoinSelection}
*/
  get_coin_selection(): WasmCoinSelection;
/**
*
*     * RBF
*     
* @returns {WasmTxBuilder}
*/
  enable_rbf(): WasmTxBuilder;
/**
* @returns {WasmTxBuilder}
*/
  disable_rbf(): WasmTxBuilder;
/**
* @returns {boolean}
*/
  get_rbf_enabled(): boolean;
/**
*
*     * Change policy
*     
* @param {WasmChangeSpendPolicy} change_policy
* @returns {WasmTxBuilder}
*/
  set_change_policy(change_policy: WasmChangeSpendPolicy): WasmTxBuilder;
/**
* @returns {WasmChangeSpendPolicy}
*/
  get_change_policy(): WasmChangeSpendPolicy;
/**
*
*     * Fees
*     
* @param {number} sat_per_vb
* @returns {WasmTxBuilder}
*/
  set_fee_rate(sat_per_vb: number): WasmTxBuilder;
/**
* @returns {number | undefined}
*/
  get_fee_rate(): number | undefined;
/**
*
*     * Locktime
*     
* @param {WasmLockTime} locktime
* @returns {WasmTxBuilder}
*/
  add_locktime(locktime: WasmLockTime): WasmTxBuilder;
/**
* @returns {WasmTxBuilder}
*/
  remove_locktime(): WasmTxBuilder;
/**
* @returns {WasmLockTime | undefined}
*/
  get_locktime(): WasmLockTime | undefined;
/**
*
*     * Final
*     
* @param {WasmNetwork} network
* @returns {WasmPartiallySignedTransaction}
*/
  create_pbst(network: WasmNetwork): WasmPartiallySignedTransaction;
}
/**
*/
export class WasmTxIn {
  free(): void;
/**
*/
  previous_output: WasmOutPoint;
/**
*/
  script_sig: WasmScript;
/**
*/
  sequence: WasmSequence;
}
/**
*/
export class WasmTxOut {
  free(): void;
/**
*/
  script_pubkey: WasmScript;
/**
*/
  value: bigint;
}
/**
*/
export class WasmUtxo {
  free(): void;
/**
*/
  confirmation_time: WasmConfirmation;
/**
*/
  derivation_index: number;
/**
*/
  is_spent: boolean;
/**
*/
  keychain: WasmKeychainKind;
/**
*/
  outpoint: WasmOutPoint;
/**
*/
  script_pubkey: WasmScript;
/**
*/
  value: bigint;
}
/**
*/
export class WasmWallet {
  free(): void;
/**
* @param {string} bip39_mnemonic
* @param {string | undefined} bip38_passphrase
* @param {WasmWalletConfig} config
*/
  constructor(bip39_mnemonic: string, bip38_passphrase: string | undefined, config: WasmWalletConfig);
/**
* @param {WasmSupportedBIPs} bip
* @param {number} account_index
* @returns {string}
*/
  add_account(bip: WasmSupportedBIPs, account_index: number): string;
/**
* @param {WasmSupportedBIPs} bip
* @param {number} account_index
* @returns {WasmAccount | undefined}
*/
  get_account(bip: WasmSupportedBIPs, account_index: number): WasmAccount | undefined;
/**
* @returns {WasmBalance}
*/
  get_balance(): WasmBalance;
/**
* @returns {string}
*/
  get_fingerprint(): string;
}
/**
*/
export class WasmWalletConfig {
  free(): void;
/**
* @param {WasmNetwork | undefined} [network]
*/
  constructor(network?: WasmNetwork);
/**
*/
  network: WasmNetwork;
}

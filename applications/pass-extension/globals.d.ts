import type { Maybe } from '@proton/pass/types';

export * from '@proton/pass/globals.d';

export type ExportFunction = (fn: Function, target: any, options: { defineAs: string }) => void;
export type CloneInto = <T>(obj: T, target: any, options: { cloneFunctions?: boolean; wrapReflectors?: boolean }) => T;

declare global {
    interface Window {
        /** This function is injected via a page-script in the main world
         * via the InjectionService. `hash` is a unique identifier per tab
         * and per service worker generated by the service worker.  */
        registerPassElements?: (hash: string) => void;
        wrappedJSObject?: Window;
    }

    var cloneInto: Maybe<CloneInto>;
    var exportFunction: Maybe<ExportFunction>;
}

@import '~@proton/styles/scss/lib';

.composer-assistant {
	// will need to taxonomise, left as exception ATM
	--special-color: #d132ea;

	position: relative;
	block-size: 95%;
	padding-inline: 1em;
	padding-block: 0;

	&-special-color {
		color: var(--special-color);
	}

	&-container {
		inset-inline: 0;
		padding-inline: 1em 1em;
		background: var(--background-norm);
		z-index: 2;
		margin-block-start: 3.5em;

		// need to push the composer content when collapsed
		+ .composer-body-container .editor-wrapper {
			margin-block-start: 5em; // move it from good size (includes room for status and 2 lines error messages)
		}

		&:has(.composer-assistant-hint:empty) + .composer-body-container .editor-wrapper {
			margin-block-start: 3em;
		}

		&--expanded {
			// to hide properly everything, including dark modes
			inset-block-end: 0.5em;
		}

		// plain text case
		&:has(+ .composer-body-container .editor-textarea) {
			margin-block-start: 0.2em;
		}

		+ .composer-body-container .editor-textarea {
			margin-block-start: 5.5em; // move it from good size (includes room for status and 2 lines error messages)
			block-size: calc(100% - 5.5em);
		}

		&:has(.composer-assistant-hint:empty) + .composer-body-container .editor-textarea {
			margin-block-start: 3.5em;
			block-size: calc(100% - 3.5em);
		}
	}

	// If hint is empty in field, add some margin to generated content
	&:has(.composer-assistant-hint:empty) .text-pre-line {
		padding-block-start: 0.5em;
	}

	&-input {
		color: var(--text-hint);
		display: flex;
		min-block-size: 0;

		&:placeholder-shown {
			block-size: rem(26);
			overflow: hidden;
		}

		&[rows='1'] {
			block-size: rem(26);
		}

		&[rows='2'] {
			block-size: rem(46);
		}

		&[rows='3'] {
			block-size: rem(66);
		}

		&[rows='4'] {
			block-size: rem(86);
		}

		&[rows='5'] {
			block-size: rem(106);
		}

		&:focus {
			color: inherit;
		}
	}

	&-hint {
		min-block-size: 2.2em; // magic value to avoid jumps, because pause button is taller than some others
		margin-block-start: 1px;

		&:empty {
			min-block-size: 0;
		}
	}

	&-right-icons-container {
		min-block-size: 2em;
		max-block-size: 2em;
	}

	&-refine-button {
		font-size: em(12);
		block-size: em(28, 12);

		--padding-inline: #{em(8)};
	}

	&-refine-popover {
		inset-inline: 0.5em;
		inset-block-end: 100%;
		margin-block-end: 0.8em;

		&:has(.composer-assistant-refine-content:empty) {
			display: none;
		}
	}

	&-refine-content {
		max-block-size: 4.2em;
	}

	&-progress {
		block-size: 1px;
		border-radius: 0;
		color: var(--special-color);

		&::-webkit-progress-value {
			background: var(--special-color);
		}

		&::-moz-progress-bar {
			background: var(--special-color);
		}

		&--error {
			color: var(--signal-danger);

			&::-webkit-progress-value {
				background: var(--signal-danger);
			}

			&::-moz-progress-bar {
				background: var(--signal-danger);
			}
		}
	}
}
